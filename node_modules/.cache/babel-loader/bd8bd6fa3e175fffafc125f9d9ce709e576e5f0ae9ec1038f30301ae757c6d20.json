{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/afian/Documents/node_apps/h3js-learning/node_modules/react-map-gl/src/types/external.ts"],"sourcesContent":["import type {PaddingOptions, MapboxEvent, Popup, Marker, GeolocateControl, LngLat} from 'mapbox-gl';\n\n/** Defines the projection that the map should be rendered in */\nexport type ProjectionSpecification = {\n  name:\n    | 'albers'\n    | 'equalEarth'\n    | 'equirectangular'\n    | 'lambertConformalConic'\n    | 'mercator'\n    | 'naturalEarth'\n    | 'winkelTripel';\n  center?: [number, number];\n  parallels?: [number, number];\n};\n\n/** Describes the camera's state */\nexport type ViewState = {\n  /** Longitude at map center */\n  longitude: number;\n  /** Latitude at map center */\n  latitude: number;\n  /** Map zoom level */\n  zoom: number;\n  /** Map rotation bearing in degrees counter-clockwise from north */\n  bearing: number;\n  /** Map angle in degrees at which the camera is looking at the ground */\n  pitch: number;\n  /** Dimensions in pixels applied on each side of the viewport for shifting the vanishing point. */\n  padding: PaddingOptions;\n};\n\nexport type ControlPosition = 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\n\nexport interface ImmutableLike {\n  toJS: () => any;\n}\n\n/* Events */\n\nexport type ViewStateChangeEvent =\n  | (MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & {\n      type: 'movestart' | 'move' | 'moveend' | 'zoomstart' | 'zoom' | 'zoomend';\n      viewState: ViewState;\n    })\n  | (MapboxEvent<MouseEvent | TouchEvent | undefined> & {\n      type:\n        | 'rotatestart'\n        | 'rotate'\n        | 'rotateend'\n        | 'dragstart'\n        | 'drag'\n        | 'dragend'\n        | 'pitchstart'\n        | 'pitch'\n        | 'pitchend';\n      viewState: ViewState;\n    });\n\nexport type PopupEvent = {\n  type: 'open' | 'close';\n  target: Popup;\n};\n\nexport type MarkerDragEvent = {\n  type: 'dragstart' | 'drag' | 'dragend';\n  target: Marker;\n  lngLat: LngLat;\n};\n\nexport type GeolocateEvent = {\n  type: string;\n  target: GeolocateControl;\n};\n\nexport type GeolocateResultEvent = GeolocateEvent & GeolocationPosition;\n\nexport type GeolocateErrorEvent = GeolocateEvent & GeolocationPositionError;\n\n/* re-export mapbox types */\n\nexport type {\n  Point,\n  PointLike,\n  LngLat,\n  LngLatLike,\n  LngLatBounds,\n  LngLatBoundsLike,\n  Anchor,\n  Alignment,\n  PaddingOptions,\n  PositionOptions,\n  FitBoundsOptions,\n  DragPanOptions,\n  InteractiveOptions as ZoomRotateOptions,\n  TransformRequestFunction,\n  Light,\n  Fog,\n  TerrainSpecification,\n  Style as MapboxStyle,\n  BackgroundLayer,\n  CircleLayer,\n  FillExtrusionLayer,\n  FillLayer,\n  HeatmapLayer,\n  HillshadeLayer,\n  LineLayer,\n  RasterLayer,\n  SymbolLayer,\n  CustomLayerInterface,\n  SkyLayer,\n  GeoJSONSourceRaw,\n  VideoSourceRaw,\n  ImageSourceRaw,\n  CanvasSourceRaw,\n  GeoJSONSource,\n  VideoSource,\n  ImageSource,\n  CanvasSource,\n  VectorSourceImpl as VectorTileSource,\n  VectorSource as VectorSourceRaw,\n  RasterSource,\n  RasterDemSource,\n  MapLayerMouseEvent,\n  MapLayerTouchEvent,\n  MapBoxZoomEvent,\n  MapWheelEvent,\n  MapStyleDataEvent,\n  MapSourceDataEvent,\n  MapboxEvent,\n  ErrorEvent,\n  MapboxGeoJSONFeature,\n  IControl,\n  Map as MapboxMap\n} from 'mapbox-gl';\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}