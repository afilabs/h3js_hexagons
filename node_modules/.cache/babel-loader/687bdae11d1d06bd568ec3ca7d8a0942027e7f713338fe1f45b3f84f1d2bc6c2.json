{"ast":null,"code":"import { transformToViewState, applyViewStateToTransform, cloneTransform } from '../utils/transform';\nimport { normalizeStyle } from '../utils/style-utils';\nimport { deepEqual } from '../utils/deep-equal';\nconst pointerEvents = {\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseover: 'onMouseOver',\n  mousemove: 'onMouseMove',\n  click: 'onClick',\n  dblclick: 'onDblClick',\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mouseout: 'onMouseOut',\n  contextmenu: 'onContextMenu',\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchmove: 'onTouchMove',\n  touchcancel: 'onTouchCancel'\n};\nconst cameraEvents = {\n  movestart: 'onMoveStart',\n  move: 'onMove',\n  moveend: 'onMoveEnd',\n  dragstart: 'onDragStart',\n  drag: 'onDrag',\n  dragend: 'onDragEnd',\n  zoomstart: 'onZoomStart',\n  zoom: 'onZoom',\n  zoomend: 'onZoomEnd',\n  rotatestart: 'onRotateStart',\n  rotate: 'onRotate',\n  rotateend: 'onRotateEnd',\n  pitchstart: 'onPitchStart',\n  pitch: 'onPitch',\n  pitchend: 'onPitchEnd'\n};\nconst otherEvents = {\n  wheel: 'onWheel',\n  boxzoomstart: 'onBoxZoomStart',\n  boxzoomend: 'onBoxZoomEnd',\n  boxzoomcancel: 'onBoxZoomCancel',\n  resize: 'onResize',\n  load: 'onLoad',\n  render: 'onRender',\n  idle: 'onIdle',\n  remove: 'onRemove',\n  data: 'onData',\n  styledata: 'onStyleData',\n  sourcedata: 'onSourceData',\n  error: 'onError'\n};\nconst settingNames = ['minZoom', 'maxZoom', 'minPitch', 'maxPitch', 'maxBounds', 'projection', 'renderWorldCopies'];\nconst handlerNames = ['scrollZoom', 'boxZoom', 'dragRotate', 'dragPan', 'keyboard', 'doubleClickZoom', 'touchZoomRotate', 'touchPitch'];\n/**\n * A wrapper for mapbox-gl's Map class\n */\nexport default class Mapbox {\n  constructor(MapClass, props, container) {\n    // mapboxgl.Map instance. Not using type here because we are accessing\n    // private members and methods\n    this._map = null;\n    // Internal states\n    this._internalUpdate = false;\n    this._inRender = false;\n    this._hoveredFeatures = null;\n    this._deferredEvents = {\n      move: false,\n      zoom: false,\n      pitch: false,\n      rotate: false\n    };\n    this._onEvent = e => {\n      // @ts-ignore\n      const cb = this.props[otherEvents[e.type]];\n      if (cb) {\n        cb(e);\n      }\n    };\n    this._onPointerEvent = e => {\n      if (e.type === 'mousemove' || e.type === 'mouseout') {\n        this._updateHover(e);\n      }\n      // @ts-ignore\n      const cb = this.props[pointerEvents[e.type]];\n      if (cb) {\n        if (this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {\n          e.features = this._hoveredFeatures || this._queryRenderedFeatures(e.point);\n        }\n        cb(e);\n        delete e.features;\n      }\n    };\n    this._onCameraEvent = e => {\n      if (!this._internalUpdate) {\n        // @ts-ignore\n        const cb = this.props[cameraEvents[e.type]];\n        if (cb) {\n          cb(e);\n        }\n      }\n      if (e.type in this._deferredEvents) {\n        this._deferredEvents[e.type] = false;\n      }\n    };\n    this._MapClass = MapClass;\n    this.props = props;\n    this._initialize(container);\n  }\n  get map() {\n    return this._map;\n  }\n  get transform() {\n    return this._renderTransform;\n  }\n  setProps(props) {\n    const oldProps = this.props;\n    this.props = props;\n    const settingsChanged = this._updateSettings(props, oldProps);\n    if (settingsChanged) {\n      this._createShadowTransform(this._map);\n    }\n    const sizeChanged = this._updateSize(props);\n    const viewStateChanged = this._updateViewState(props, true);\n    this._updateStyle(props, oldProps);\n    this._updateStyleComponents(props, oldProps);\n    this._updateHandlers(props, oldProps);\n    // If 1) view state has changed to match props and\n    //    2) the props change is not triggered by map events,\n    // it's driven by an external state change. Redraw immediately\n    if (settingsChanged || sizeChanged || viewStateChanged && !this._map.isMoving()) {\n      this.redraw();\n    }\n  }\n  static reuse(props, container) {\n    const that = Mapbox.savedMaps.pop();\n    if (!that) {\n      return null;\n    }\n    const map = that.map;\n    // When reusing the saved map, we need to reparent the map(canvas) and other child nodes\n    // intoto the new container from the props.\n    // Step 1: reparenting child nodes from old container to new container\n    const oldContainer = map.getContainer();\n    container.className = oldContainer.className;\n    while (oldContainer.childNodes.length > 0) {\n      container.appendChild(oldContainer.childNodes[0]);\n    }\n    // Step 2: replace the internal container with new container from the react component\n    // @ts-ignore\n    map._container = container;\n    // With maplibre-gl as mapLib, map uses ResizeObserver to observe when its container resizes.\n    // When reusing the saved map, we need to disconnect the observer and observe the new container.\n    // Step 3: telling the ResizeObserver to disconnect and observe the new container\n    // @ts-ignore\n    const resizeObserver = map._resizeObserver;\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      resizeObserver.observe(container);\n    }\n    // Step 4: apply new props\n    that.setProps({\n      ...props,\n      styleDiffing: false\n    });\n    map.resize();\n    const {\n      initialViewState\n    } = props;\n    if (initialViewState) {\n      if (initialViewState.bounds) {\n        map.fitBounds(initialViewState.bounds, {\n          ...initialViewState.fitBoundsOptions,\n          duration: 0\n        });\n      } else {\n        that._updateViewState(initialViewState, false);\n      }\n    }\n    // Simulate load event\n    if (map.isStyleLoaded()) {\n      map.fire('load');\n    } else {\n      map.once('styledata', () => map.fire('load'));\n    }\n    // Force reload\n    // @ts-ignore\n    map._update();\n    return that;\n  }\n  /* eslint-disable complexity,max-statements */\n  _initialize(container) {\n    const {\n      props\n    } = this;\n    const mapOptions = {\n      ...props,\n      ...props.initialViewState,\n      accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,\n      container,\n      style: normalizeStyle(props.mapStyle)\n    };\n    const viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;\n    Object.assign(mapOptions, {\n      center: [viewState.longitude || 0, viewState.latitude || 0],\n      zoom: viewState.zoom || 0,\n      pitch: viewState.pitch || 0,\n      bearing: viewState.bearing || 0\n    });\n    if (props.gl) {\n      // eslint-disable-next-line\n      const getContext = HTMLCanvasElement.prototype.getContext;\n      // Hijack canvas.getContext to return our own WebGLContext\n      // This will be called inside the mapboxgl.Map constructor\n      // @ts-expect-error\n      HTMLCanvasElement.prototype.getContext = () => {\n        // Unhijack immediately\n        HTMLCanvasElement.prototype.getContext = getContext;\n        return props.gl;\n      };\n    }\n    const map = new this._MapClass(mapOptions);\n    // Props that are not part of constructor options\n    if (viewState.padding) {\n      map.setPadding(viewState.padding);\n    }\n    if (props.cursor) {\n      map.getCanvas().style.cursor = props.cursor;\n    }\n    this._createShadowTransform(map);\n    // Hack\n    // Insert code into map's render cycle\n    const renderMap = map._render;\n    map._render = arg => {\n      this._inRender = true;\n      renderMap.call(map, arg);\n      this._inRender = false;\n    };\n    const runRenderTaskQueue = map._renderTaskQueue.run;\n    map._renderTaskQueue.run = arg => {\n      runRenderTaskQueue.call(map._renderTaskQueue, arg);\n      this._onBeforeRepaint();\n    };\n    map.on('render', () => this._onAfterRepaint());\n    // Insert code into map's event pipeline\n    const fireEvent = map.fire;\n    map.fire = this._fireEvent.bind(this, fireEvent);\n    // add listeners\n    map.on('resize', () => {\n      this._renderTransform.resize(map.transform.width, map.transform.height);\n    });\n    map.on('styledata', () => this._updateStyleComponents(this.props, {}));\n    map.on('sourcedata', () => this._updateStyleComponents(this.props, {}));\n    for (const eventName in pointerEvents) {\n      map.on(eventName, this._onPointerEvent);\n    }\n    for (const eventName in cameraEvents) {\n      map.on(eventName, this._onCameraEvent);\n    }\n    for (const eventName in otherEvents) {\n      map.on(eventName, this._onEvent);\n    }\n    this._map = map;\n  }\n  /* eslint-enable complexity,max-statements */\n  recycle() {\n    // Clean up unnecessary elements before storing for reuse.\n    const container = this.map.getContainer();\n    const children = container.querySelector('[mapboxgl-children]');\n    children === null || children === void 0 ? void 0 : children.remove();\n    Mapbox.savedMaps.push(this);\n  }\n  destroy() {\n    this._map.remove();\n  }\n  // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next\n  // render cycle, which is managed by Mapbox's animation loop.\n  // This removes the synchronization issue caused by requestAnimationFrame.\n  redraw() {\n    const map = this._map;\n    // map._render will throw error if style does not exist\n    // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513\n    //   /src/ui/map.js#L1834\n    if (!this._inRender && map.style) {\n      // cancel the scheduled update\n      if (map._frame) {\n        map._frame.cancel();\n        map._frame = null;\n      }\n      // the order is important - render() may schedule another update\n      map._render();\n    }\n  }\n  _createShadowTransform(map) {\n    const renderTransform = cloneTransform(map.transform);\n    map.painter.transform = renderTransform;\n    this._renderTransform = renderTransform;\n  }\n  /* Trigger map resize if size is controlled\n     @param {object} nextProps\n     @returns {bool} true if size has changed\n   */\n  _updateSize(nextProps) {\n    // Check if size is controlled\n    const {\n      viewState\n    } = nextProps;\n    if (viewState) {\n      const map = this._map;\n      if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {\n        map.resize();\n        return true;\n      }\n    }\n    return false;\n  }\n  // Adapted from map.jumpTo\n  /* Update camera to match props\n     @param {object} nextProps\n     @param {bool} triggerEvents - should fire camera events\n     @returns {bool} true if anything is changed\n   */\n  _updateViewState(nextProps, triggerEvents) {\n    if (this._internalUpdate) {\n      return false;\n    }\n    const map = this._map;\n    const tr = this._renderTransform;\n    // Take a snapshot of the transform before mutation\n    const {\n      zoom,\n      pitch,\n      bearing\n    } = tr;\n    const isMoving = map.isMoving();\n    if (isMoving) {\n      // All movement of the camera is done relative to the sea level\n      tr.cameraElevationReference = 'sea';\n    }\n    const changed = applyViewStateToTransform(tr, {\n      ...transformToViewState(map.transform),\n      ...nextProps\n    });\n    if (isMoving) {\n      // Reset camera reference\n      tr.cameraElevationReference = 'ground';\n    }\n    if (changed && triggerEvents) {\n      const deferredEvents = this._deferredEvents;\n      // Delay DOM control updates to the next render cycle\n      deferredEvents.move = true;\n      deferredEvents.zoom || (deferredEvents.zoom = zoom !== tr.zoom);\n      deferredEvents.rotate || (deferredEvents.rotate = bearing !== tr.bearing);\n      deferredEvents.pitch || (deferredEvents.pitch = pitch !== tr.pitch);\n    }\n    // Avoid manipulating the real transform when interaction/animation is ongoing\n    // as it would interfere with Mapbox's handlers\n    if (!isMoving) {\n      applyViewStateToTransform(map.transform, nextProps);\n    }\n    return changed;\n  }\n  /* Update camera constraints and projection settings to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateSettings(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n    for (const propName of settingNames) {\n      if (propName in nextProps && !deepEqual(nextProps[propName], currProps[propName])) {\n        changed = true;\n        map[`set${propName[0].toUpperCase()}${propName.slice(1)}`](nextProps[propName]);\n      }\n    }\n    return changed;\n  }\n  /* Update map style to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if style is changed\n   */\n  _updateStyle(nextProps, currProps) {\n    if (nextProps.cursor !== currProps.cursor) {\n      this._map.getCanvas().style.cursor = nextProps.cursor;\n    }\n    if (nextProps.mapStyle !== currProps.mapStyle) {\n      const options = {\n        diff: nextProps.styleDiffing\n      };\n      if ('localIdeographFontFamily' in nextProps) {\n        options.localIdeographFontFamily = nextProps.localIdeographFontFamily;\n      }\n      this._map.setStyle(normalizeStyle(nextProps.mapStyle), options);\n      return true;\n    }\n    return false;\n  }\n  /* Update fog, light and terrain to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateStyleComponents(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n    if (map.style.loaded()) {\n      if ('light' in nextProps && !deepEqual(nextProps.light, currProps.light)) {\n        changed = true;\n        map.setLight(nextProps.light);\n      }\n      if ('fog' in nextProps && !deepEqual(nextProps.fog, currProps.fog)) {\n        changed = true;\n        map.setFog(nextProps.fog);\n      }\n      if ('terrain' in nextProps && !deepEqual(nextProps.terrain, currProps.terrain)) {\n        if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {\n          changed = true;\n          map.setTerrain(nextProps.terrain);\n        }\n      }\n    }\n    return changed;\n  }\n  /* Update interaction handlers to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateHandlers(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n    for (const propName of handlerNames) {\n      const newValue = nextProps[propName];\n      if (!deepEqual(newValue, currProps[propName])) {\n        changed = true;\n        if (newValue) {\n          map[propName].enable(newValue);\n        } else {\n          map[propName].disable();\n        }\n      }\n    }\n    return changed;\n  }\n  _queryRenderedFeatures(point) {\n    const map = this._map;\n    const {\n      interactiveLayerIds = []\n    } = this.props;\n    try {\n      return map.queryRenderedFeatures(point, {\n        layers: interactiveLayerIds.filter(map.getLayer.bind(map))\n      });\n    } catch (_a) {\n      // May fail if style is not loaded\n      return [];\n    }\n  }\n  _updateHover(e) {\n    var _a;\n    const {\n      props\n    } = this;\n    const shouldTrackHoveredFeatures = props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);\n    if (shouldTrackHoveredFeatures) {\n      const eventType = e.type;\n      const wasHovering = ((_a = this._hoveredFeatures) === null || _a === void 0 ? void 0 : _a.length) > 0;\n      const features = this._queryRenderedFeatures(e.point);\n      const isHovering = features.length > 0;\n      if (!isHovering && wasHovering) {\n        e.type = 'mouseleave';\n        this._onPointerEvent(e);\n      }\n      this._hoveredFeatures = features;\n      if (isHovering && !wasHovering) {\n        e.type = 'mouseenter';\n        this._onPointerEvent(e);\n      }\n      e.type = eventType;\n    } else {\n      this._hoveredFeatures = null;\n    }\n  }\n  _fireEvent(baseFire, event, properties) {\n    const map = this._map;\n    const tr = map.transform;\n    const eventType = typeof event === 'string' ? event : event.type;\n    if (eventType === 'move') {\n      this._updateViewState(this.props, false);\n    }\n    if (eventType in cameraEvents) {\n      if (typeof event === 'object') {\n        event.viewState = transformToViewState(tr);\n      }\n      if (this._map.isMoving()) {\n        // Replace map.transform with ours during the callbacks\n        map.transform = this._renderTransform;\n        baseFire.call(map, event, properties);\n        map.transform = tr;\n        return map;\n      }\n    }\n    baseFire.call(map, event, properties);\n    return map;\n  }\n  // All camera manipulations are complete, ready to repaint\n  _onBeforeRepaint() {\n    const map = this._map;\n    // If there are camera changes driven by props, invoke camera events so that DOM controls are synced\n    this._internalUpdate = true;\n    for (const eventType in this._deferredEvents) {\n      if (this._deferredEvents[eventType]) {\n        map.fire(eventType);\n      }\n    }\n    this._internalUpdate = false;\n    const tr = this._map.transform;\n    // Make sure camera matches the current props\n    this._map.transform = this._renderTransform;\n    this._onAfterRepaint = () => {\n      // Restores camera state before render/load events are fired\n      this._map.transform = tr;\n    };\n  }\n}\nMapbox.savedMaps = [];\n/**\n * Access token can be provided via one of:\n *   mapboxAccessToken prop\n *   access_token query parameter\n *   MapboxAccessToken environment variable\n *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable\n * @returns access token\n */\nfunction getAccessTokenFromEnv() {\n  let accessToken = null;\n  /* global location, process */\n  if (typeof location !== 'undefined') {\n    const match = /access_token=([^&\\/]*)/.exec(location.search);\n    accessToken = match && match[1];\n  }\n  // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly\n  try {\n    accessToken = accessToken || process.env.MapboxAccessToken;\n  } catch (_a) {\n    // ignore\n  }\n  try {\n    accessToken = accessToken || process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  } catch (_b) {\n    // ignore\n  }\n  return accessToken;\n}","map":{"version":3,"names":["transformToViewState","applyViewStateToTransform","cloneTransform","normalizeStyle","deepEqual","pointerEvents","mousedown","mouseup","mouseover","mousemove","click","dblclick","mouseenter","mouseleave","mouseout","contextmenu","touchstart","touchend","touchmove","touchcancel","cameraEvents","movestart","move","moveend","dragstart","drag","dragend","zoomstart","zoom","zoomend","rotatestart","rotate","rotateend","pitchstart","pitch","pitchend","otherEvents","wheel","boxzoomstart","boxzoomend","boxzoomcancel","resize","load","render","idle","remove","data","styledata","sourcedata","error","settingNames","handlerNames","Mapbox","constructor","MapClass","props","container","_map","_internalUpdate","_inRender","_hoveredFeatures","_deferredEvents","_onEvent","e","cb","type","_onPointerEvent","_updateHover","interactiveLayerIds","features","_queryRenderedFeatures","point","_onCameraEvent","_MapClass","_initialize","map","transform","_renderTransform","setProps","oldProps","settingsChanged","_updateSettings","_createShadowTransform","sizeChanged","_updateSize","viewStateChanged","_updateViewState","_updateStyle","_updateStyleComponents","_updateHandlers","isMoving","redraw","reuse","that","savedMaps","pop","oldContainer","getContainer","className","childNodes","length","appendChild","_container","resizeObserver","_resizeObserver","disconnect","observe","styleDiffing","initialViewState","bounds","fitBounds","fitBoundsOptions","duration","isStyleLoaded","fire","once","_update","mapOptions","accessToken","mapboxAccessToken","getAccessTokenFromEnv","style","mapStyle","viewState","Object","assign","center","longitude","latitude","bearing","gl","getContext","HTMLCanvasElement","prototype","padding","setPadding","cursor","getCanvas","renderMap","_render","arg","call","runRenderTaskQueue","_renderTaskQueue","run","_onBeforeRepaint","on","_onAfterRepaint","fireEvent","_fireEvent","bind","width","height","eventName","recycle","children","querySelector","push","destroy","_frame","cancel","renderTransform","painter","nextProps","triggerEvents","tr","cameraElevationReference","changed","deferredEvents","currProps","propName","toUpperCase","slice","options","diff","localIdeographFontFamily","setStyle","loaded","light","setLight","fog","setFog","terrain","getSource","source","setTerrain","newValue","enable","disable","queryRenderedFeatures","layers","filter","getLayer","_a","shouldTrackHoveredFeatures","onMouseMove","onMouseEnter","onMouseLeave","eventType","wasHovering","isHovering","baseFire","event","properties","location","match","exec","search","process","env","MapboxAccessToken","REACT_APP_MAPBOX_ACCESS_TOKEN","_b"],"sources":["/Users/afian/Documents/node_apps/h3js_hexagons/node_modules/react-map-gl/src/mapbox/mapbox.ts"],"sourcesContent":["import {transformToViewState, applyViewStateToTransform, cloneTransform} from '../utils/transform';\nimport {normalizeStyle} from '../utils/style-utils';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type {\n  Transform,\n  ProjectionSpecification,\n  ViewState,\n  ViewStateChangeEvent,\n  DragPanOptions,\n  ZoomRotateOptions,\n  TransformRequestFunction,\n  Light,\n  Fog,\n  Point,\n  TerrainSpecification,\n  MapboxStyle,\n  ImmutableLike,\n  LngLatBoundsLike,\n  FitBoundsOptions,\n  MapMouseEvent,\n  MapLayerMouseEvent,\n  MapLayerTouchEvent,\n  MapWheelEvent,\n  MapBoxZoomEvent,\n  MapStyleDataEvent,\n  MapSourceDataEvent,\n  MapboxEvent,\n  ErrorEvent,\n  MapboxGeoJSONFeature,\n  MapboxMap\n} from '../types';\n\nexport type MapboxProps = Partial<ViewState> & {\n  // Init options\n  mapboxAccessToken?: string;\n\n  /** Camera options used when constructing the Map instance */\n  initialViewState?: Partial<ViewState> & {\n    /** The initial bounds of the map. If bounds is specified, it overrides longitude, latitude and zoom options. */\n    bounds?: LngLatBoundsLike;\n    /** A fitBounds options object to use only when setting the bounds option. */\n    fitBoundsOptions?: FitBoundsOptions;\n  };\n\n  /** If provided, render into an external WebGL context */\n  gl?: WebGLRenderingContext;\n\n  /**\n   * If true, the gl context will be created with MSA antialiasing, which can be useful for antialiasing custom layers.\n   * This is false by default as a performance optimization.\n   * @default false\n   */\n  antialias?: boolean;\n  /**\n   * If true, an attribution control will be added to the map.\n   * @default true\n   */\n  attributionControl?: boolean;\n  /**\n   * Snap to north threshold in degrees.\n   * @default 7\n   */\n  bearingSnap?: number;\n  /**\n   * The max number of pixels a user can shift the mouse pointer during a click for it to be\n   * considered a valid click (as opposed to a mouse drag).\n   * @default 3\n   */\n  clickTolerance?: number;\n  /**\n   * If `true`, Resource Timing API information will be collected for requests made by GeoJSON\n   * and Vector Tile web workers (this information is normally inaccessible from the main\n   * Javascript thread). Information will be returned in a `resourceTiming` property of\n   * relevant `data` events.\n   * @default false\n   */\n  collectResourceTiming?: boolean;\n  /**\n   * If `true` , scroll zoom will require pressing the ctrl or ⌘ key while scrolling to zoom map,\n   * and touch pan will require using two fingers while panning to move the map.\n   * Touch pitch will require three fingers to activate if enabled.\n   */\n  cooperativeGestures?: boolean;\n  /**\n   * If `true`, symbols from multiple sources can collide with each other during collision\n   * detection. If `false`, collision detection is run separately for the symbols in each source.\n   * @default true\n   */\n  crossSourceCollisions?: boolean;\n  /** String or strings to show in an AttributionControl.\n   * Only applicable if options.attributionControl is `true`. */\n  customAttribution?: string | string[];\n  /**\n   * Controls the duration of the fade-in/fade-out animation for label collisions, in milliseconds.\n   * This setting affects all symbol layers. This setting does not affect the duration of runtime\n   * styling transitions or raster tile cross-fading.\n   * @default 300\n   */\n  fadeDuration?: number;\n  /** If true, map creation will fail if the implementation determines that the performance of the created WebGL context would be dramatically lower than expected.\n   * @default false\n   */\n  failIfMajorPerformanceCaveat?: boolean;\n  /** If `true`, the map's position (zoom, center latitude, center longitude, bearing, and pitch) will be synced with the hash fragment of the page's URL.\n   * For example, `http://path/to/my/page.html#2.59/39.26/53.07/-24.1/60`.\n   * An additional string may optionally be provided to indicate a parameter-styled hash,\n   * e.g. http://path/to/my/page.html#map=2.59/39.26/53.07/-24.1/60&foo=bar, where foo\n   * is a custom parameter and bar is an arbitrary hash distinct from the map hash.\n   */\n  hash?: boolean | string;\n  /** If false, no mouse, touch, or keyboard listeners are attached to the map, so it will not respond to input\n   * @default true\n   */\n  interactive?: boolean;\n  /** A patch to apply to the default localization table for UI strings, e.g. control tooltips.\n   * The `locale` object maps namespaced UI string IDs to translated strings in the target language;\n   * see `src/ui/default_locale.js` for an example with all supported string IDs.\n   * The object may specify all UI strings (thereby adding support for a new translation) or\n   * only a subset of strings (thereby patching the default translation table).\n   */\n  locale?: {[key: string]: string};\n  /**\n   * Overrides the generation of all glyphs and font settings except font-weight keywords\n   * Also overrides localIdeographFontFamily\n   * @default null\n   */\n  localFontFamily?: string;\n  /**\n   * If specified, defines a CSS font-family for locally overriding generation of glyphs in the\n   * 'CJK Unified Ideographs' and 'Hangul Syllables' ranges. In these ranges, font settings from\n   * the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold).\n   * The purpose of this option is to avoid bandwidth-intensive glyph server requests.\n   * @default \"sans-serif\"\n   */\n  localIdeographFontFamily?: string;\n  /**\n   * A string representing the position of the Mapbox wordmark on the map.\n   * @default \"bottom-left\"\n   */\n  logoPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  /**\n   * The maximum number of tiles stored in the tile cache for a given source. If omitted, the\n   * cache will be dynamically sized based on the current viewport.\n   * @default null\n   */\n  maxTileCacheSize?: number;\n  /**\n   * If true, map will prioritize rendering for performance by reordering layers\n   * If false, layers will always be drawn in the specified order\n   * @default true\n   */\n  optimizeForTerrain?: boolean;\n  /**\n   * If `false`, the map's pitch (tilt) control with \"drag to rotate\" interaction will be disabled.\n   * @default true\n   */\n  pitchWithRotate?: boolean;\n  /** If true, The maps canvas can be exported to a PNG using map.getCanvas().toDataURL();. This is false by default as a performance optimization.\n   * @default false\n   */\n  preserveDrawingBuffer?: boolean;\n  /**\n   * If `false`, the map won't attempt to re-request tiles once they expire per their HTTP\n   * `cacheControl`/`expires` headers.\n   * @default true\n   */\n  refreshExpiredTiles?: boolean;\n  /**\n   * Allows for the usage of the map in automated tests without an accessToken with custom self-hosted test fixtures.\n   * @default null\n   */\n  testMode?: boolean;\n  /**\n   * If  true, the map will automatically resize when the browser window resizes\n   * @default true\n   */\n  trackResize?: boolean;\n  /**\n   * A callback run before the Map makes a request for an external URL. The callback can be\n   * used to modify the url, set headers, or set the credentials property for cross-origin requests.\n   * @default null\n   */\n  transformRequest?: TransformRequestFunction;\n\n  // Handlers\n\n  /**\n   * If true, enable the \"box zoom\" interaction (see BoxZoomHandler)\n   * @default true\n   */\n  boxZoom?: boolean;\n  /**\n   * If true, enable the \"double click to zoom\" interaction (see DoubleClickZoomHandler).\n   * @default true\n   */\n  doubleClickZoom?: boolean;\n  /**\n   * If `true`, the \"drag to pan\" interaction is enabled.\n   * An `Object` value is passed as options to {@link DragPanHandler#enable}.\n   * @default true\n   */\n  dragPan?: boolean | DragPanOptions;\n  /**\n   * If true, enable the \"drag to rotate\" interaction (see DragRotateHandler).\n   * @default true\n   */\n  dragRotate?: boolean;\n  /**\n   * If true, enable keyboard shortcuts (see KeyboardHandler).\n   * @default true\n   */\n  keyboard?: boolean;\n  /**\n   * If `true`, the \"scroll to zoom\" interaction is enabled.\n   * An `Object` value is passed as options to {@link ScrollZoomHandler#enable}.\n   * @default true\n   */\n  scrollZoom?: boolean | ZoomRotateOptions;\n  /**\n   * If `true`, the \"drag to pitch\" interaction is enabled.\n   * An `Object` value is passed as options to {@link TouchPitchHandler#enable}.\n   * @default true\n   */\n  touchPitch?: boolean;\n  /**\n   * If `true`, the \"pinch to rotate and zoom\" interaction is enabled.\n   * An `Object` value is passed as options to {@link TouchZoomRotateHandler#enable}.\n   * @default true\n   */\n  touchZoomRotate?: boolean | ZoomRotateOptions;\n\n  // Constraints\n\n  /** If set, the map is constrained to the given bounds. */\n  maxBounds?: LngLatBoundsLike;\n  /** Maximum pitch of the map. */\n  maxPitch?: number;\n  /** Maximum zoom of the map. */\n  maxZoom?: number;\n  /** Minimum pitch of the map. */\n  minPitch?: number;\n  /** Minimum zoom of the map. */\n  minZoom?: number;\n\n  /** For external controller to override the camera state */\n  viewState?: ViewState & {\n    width: number;\n    height: number;\n  };\n\n  // Styling\n\n  /** Mapbox style */\n  mapStyle?: string | MapboxStyle | ImmutableLike;\n  /** Enable diffing when the map style changes\n   * @default true\n   */\n  styleDiffing?: boolean;\n  /** The fog property of the style. Must conform to the Fog Style Specification .\n   * If `undefined` is provided, removes the fog from the map. */\n  fog?: Fog;\n  /** Light properties of the map. */\n  light?: Light;\n  /** Terrain property of the style. Must conform to the Terrain Style Specification .\n   * If `undefined` is provided, removes terrain from the map. */\n  terrain?: TerrainSpecification;\n  /** Default layers to query on pointer events */\n  interactiveLayerIds?: string[];\n  /** The projection the map should be rendered in\n   * @default \"mercator\"\n   */\n  projection?: ProjectionSpecification | string;\n  /**\n   * If `true`, multiple copies of the world will be rendered, when zoomed out.\n   * @default true\n   */\n  renderWorldCopies?: boolean;\n  /** CSS cursor */\n  cursor?: string;\n\n  // Callbacks\n  onMouseDown?: (e: MapLayerMouseEvent) => void;\n  onMouseUp?: (e: MapLayerMouseEvent) => void;\n  onMouseOver?: (e: MapLayerMouseEvent) => void;\n  onMouseMove?: (e: MapLayerMouseEvent) => void;\n  onClick?: (e: MapLayerMouseEvent) => void;\n  onDblClick?: (e: MapLayerMouseEvent) => void;\n  onMouseEnter?: (e: MapLayerMouseEvent) => void;\n  onMouseLeave?: (e: MapLayerMouseEvent) => void;\n  onMouseOut?: (e: MapLayerMouseEvent) => void;\n  onContextMenu?: (e: MapLayerMouseEvent) => void;\n  onTouchStart?: (e: MapLayerTouchEvent) => void;\n  onTouchEnd?: (e: MapLayerTouchEvent) => void;\n  onTouchMove?: (e: MapLayerTouchEvent) => void;\n  onTouchCancel?: (e: MapLayerTouchEvent) => void;\n\n  onMoveStart?: (e: ViewStateChangeEvent) => void;\n  onMove?: (e: ViewStateChangeEvent) => void;\n  onMoveEnd?: (e: ViewStateChangeEvent) => void;\n  onDragStart?: (e: ViewStateChangeEvent) => void;\n  onDrag?: (e: ViewStateChangeEvent) => void;\n  onDragEnd?: (e: ViewStateChangeEvent) => void;\n  onZoomStart?: (e: ViewStateChangeEvent) => void;\n  onZoom?: (e: ViewStateChangeEvent) => void;\n  onZoomEnd?: (e: ViewStateChangeEvent) => void;\n  onRotateStart?: (e: ViewStateChangeEvent) => void;\n  onRotate?: (e: ViewStateChangeEvent) => void;\n  onRotateEnd?: (e: ViewStateChangeEvent) => void;\n  onPitchStart?: (e: ViewStateChangeEvent) => void;\n  onPitch?: (e: ViewStateChangeEvent) => void;\n  onPitchEnd?: (e: ViewStateChangeEvent) => void;\n\n  onWheel?: (e: MapWheelEvent) => void;\n  onBoxZoomStart?: (e: MapBoxZoomEvent) => void;\n  onBoxZoomEnd?: (e: MapBoxZoomEvent) => void;\n  onBoxZoomCancel?: (e: MapBoxZoomEvent) => void;\n\n  onResize?: (e: MapboxEvent) => void;\n  onLoad?: (e: MapboxEvent) => void;\n  onRender?: (e: MapboxEvent) => void;\n  onIdle?: (e: MapboxEvent) => void;\n  onError?: (e: ErrorEvent) => void;\n  onRemove?: (e: MapboxEvent) => void;\n  onData?: (e: MapStyleDataEvent | MapSourceDataEvent) => void;\n  onStyleData?: (e: MapStyleDataEvent) => void;\n  onSourceData?: (e: MapSourceDataEvent) => void;\n};\n\nconst pointerEvents = {\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseover: 'onMouseOver',\n  mousemove: 'onMouseMove',\n  click: 'onClick',\n  dblclick: 'onDblClick',\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mouseout: 'onMouseOut',\n  contextmenu: 'onContextMenu',\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchmove: 'onTouchMove',\n  touchcancel: 'onTouchCancel'\n};\nconst cameraEvents = {\n  movestart: 'onMoveStart',\n  move: 'onMove',\n  moveend: 'onMoveEnd',\n  dragstart: 'onDragStart',\n  drag: 'onDrag',\n  dragend: 'onDragEnd',\n  zoomstart: 'onZoomStart',\n  zoom: 'onZoom',\n  zoomend: 'onZoomEnd',\n  rotatestart: 'onRotateStart',\n  rotate: 'onRotate',\n  rotateend: 'onRotateEnd',\n  pitchstart: 'onPitchStart',\n  pitch: 'onPitch',\n  pitchend: 'onPitchEnd'\n};\nconst otherEvents = {\n  wheel: 'onWheel',\n  boxzoomstart: 'onBoxZoomStart',\n  boxzoomend: 'onBoxZoomEnd',\n  boxzoomcancel: 'onBoxZoomCancel',\n  resize: 'onResize',\n  load: 'onLoad',\n  render: 'onRender',\n  idle: 'onIdle',\n  remove: 'onRemove',\n  data: 'onData',\n  styledata: 'onStyleData',\n  sourcedata: 'onSourceData',\n  error: 'onError'\n};\nconst settingNames: (keyof MapboxProps)[] = [\n  'minZoom',\n  'maxZoom',\n  'minPitch',\n  'maxPitch',\n  'maxBounds',\n  'projection',\n  'renderWorldCopies'\n];\nconst handlerNames: (keyof MapboxProps)[] = [\n  'scrollZoom',\n  'boxZoom',\n  'dragRotate',\n  'dragPan',\n  'keyboard',\n  'doubleClickZoom',\n  'touchZoomRotate',\n  'touchPitch'\n];\n\n/**\n * A wrapper for mapbox-gl's Map class\n */\nexport default class Mapbox {\n  private _MapClass: typeof MapboxMap;\n  // mapboxgl.Map instance. Not using type here because we are accessing\n  // private members and methods\n  private _map: any = null;\n  // User-supplied props\n  props: MapboxProps;\n\n  // Mapbox map is stateful.\n  // During method calls/user interactions, map.transform is mutated and\n  // deviate from user-supplied props.\n  // In order to control the map reactively, we shadow the transform\n  // with the one below, which reflects the view state resolved from\n  // both user-supplied props and the underlying state\n  private _renderTransform: Transform;\n\n  // Internal states\n  private _internalUpdate: boolean = false;\n  private _inRender: boolean = false;\n  private _hoveredFeatures: MapboxGeoJSONFeature[] = null;\n  private _deferredEvents: {\n    move: boolean;\n    zoom: boolean;\n    pitch: boolean;\n    rotate: boolean;\n  } = {\n    move: false,\n    zoom: false,\n    pitch: false,\n    rotate: false\n  };\n\n  static savedMaps: Mapbox[] = [];\n\n  constructor(MapClass: typeof MapboxMap, props: MapboxProps, container: HTMLDivElement) {\n    this._MapClass = MapClass;\n    this.props = props;\n    this._initialize(container);\n  }\n\n  get map(): MapboxMap {\n    return this._map as MapboxMap;\n  }\n\n  get transform(): Transform {\n    return this._renderTransform;\n  }\n\n  setProps(props: MapboxProps) {\n    const oldProps = this.props;\n    this.props = props;\n\n    const settingsChanged = this._updateSettings(props, oldProps);\n    if (settingsChanged) {\n      this._createShadowTransform(this._map);\n    }\n    const sizeChanged = this._updateSize(props);\n    const viewStateChanged = this._updateViewState(props, true);\n    this._updateStyle(props, oldProps);\n    this._updateStyleComponents(props, oldProps);\n    this._updateHandlers(props, oldProps);\n\n    // If 1) view state has changed to match props and\n    //    2) the props change is not triggered by map events,\n    // it's driven by an external state change. Redraw immediately\n    if (settingsChanged || sizeChanged || (viewStateChanged && !this._map.isMoving())) {\n      this.redraw();\n    }\n  }\n\n  static reuse(props: MapboxProps, container: HTMLDivElement) {\n    const that = Mapbox.savedMaps.pop();\n    if (!that) {\n      return null;\n    }\n\n    const map = that.map;\n    // When reusing the saved map, we need to reparent the map(canvas) and other child nodes\n    // intoto the new container from the props.\n    // Step 1: reparenting child nodes from old container to new container\n    const oldContainer = map.getContainer();\n    container.className = oldContainer.className;\n    while (oldContainer.childNodes.length > 0) {\n      container.appendChild(oldContainer.childNodes[0]);\n    }\n    // Step 2: replace the internal container with new container from the react component\n    // @ts-ignore\n    map._container = container;\n\n    // With maplibre-gl as mapLib, map uses ResizeObserver to observe when its container resizes.\n    // When reusing the saved map, we need to disconnect the observer and observe the new container.\n    // Step 3: telling the ResizeObserver to disconnect and observe the new container\n    // @ts-ignore\n    const resizeObserver = map._resizeObserver;\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      resizeObserver.observe(container);\n    }\n\n    // Step 4: apply new props\n    that.setProps({...props, styleDiffing: false});\n    map.resize();\n    const {initialViewState} = props;\n    if (initialViewState) {\n      if (initialViewState.bounds) {\n        map.fitBounds(initialViewState.bounds, {...initialViewState.fitBoundsOptions, duration: 0});\n      } else {\n        that._updateViewState(initialViewState, false);\n      }\n    }\n\n    // Simulate load event\n    if (map.isStyleLoaded()) {\n      map.fire('load');\n    } else {\n      map.once('styledata', () => map.fire('load'));\n    }\n\n    // Force reload\n    // @ts-ignore\n    map._update();\n    return that;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  _initialize(container: HTMLDivElement) {\n    const {props} = this;\n    const mapOptions = {\n      ...props,\n      ...props.initialViewState,\n      accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,\n      container,\n      style: normalizeStyle(props.mapStyle)\n    };\n\n    const viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;\n    Object.assign(mapOptions, {\n      center: [viewState.longitude || 0, viewState.latitude || 0],\n      zoom: viewState.zoom || 0,\n      pitch: viewState.pitch || 0,\n      bearing: viewState.bearing || 0\n    });\n\n    if (props.gl) {\n      // eslint-disable-next-line\n      const getContext = HTMLCanvasElement.prototype.getContext;\n      // Hijack canvas.getContext to return our own WebGLContext\n      // This will be called inside the mapboxgl.Map constructor\n      // @ts-expect-error\n      HTMLCanvasElement.prototype.getContext = () => {\n        // Unhijack immediately\n        HTMLCanvasElement.prototype.getContext = getContext;\n        return props.gl;\n      };\n    }\n\n    const map: any = new this._MapClass(mapOptions);\n    // Props that are not part of constructor options\n    if (viewState.padding) {\n      map.setPadding(viewState.padding);\n    }\n    if (props.cursor) {\n      map.getCanvas().style.cursor = props.cursor;\n    }\n    this._createShadowTransform(map);\n\n    // Hack\n    // Insert code into map's render cycle\n    const renderMap = map._render;\n    map._render = (arg: number) => {\n      this._inRender = true;\n      renderMap.call(map, arg);\n      this._inRender = false;\n    };\n    const runRenderTaskQueue = map._renderTaskQueue.run;\n    map._renderTaskQueue.run = (arg: number) => {\n      runRenderTaskQueue.call(map._renderTaskQueue, arg);\n      this._onBeforeRepaint();\n    };\n    map.on('render', () => this._onAfterRepaint());\n    // Insert code into map's event pipeline\n    const fireEvent = map.fire;\n    map.fire = this._fireEvent.bind(this, fireEvent);\n\n    // add listeners\n    map.on('resize', () => {\n      this._renderTransform.resize(map.transform.width, map.transform.height);\n    });\n    map.on('styledata', () => this._updateStyleComponents(this.props, {}));\n    map.on('sourcedata', () => this._updateStyleComponents(this.props, {}));\n    for (const eventName in pointerEvents) {\n      map.on(eventName, this._onPointerEvent);\n    }\n    for (const eventName in cameraEvents) {\n      map.on(eventName, this._onCameraEvent);\n    }\n    for (const eventName in otherEvents) {\n      map.on(eventName, this._onEvent);\n    }\n    this._map = map;\n  }\n  /* eslint-enable complexity,max-statements */\n\n  recycle() {\n    // Clean up unnecessary elements before storing for reuse.\n    const container = this.map.getContainer();\n    const children = container.querySelector('[mapboxgl-children]');\n    children?.remove();\n\n    Mapbox.savedMaps.push(this);\n  }\n\n  destroy() {\n    this._map.remove();\n  }\n\n  // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next\n  // render cycle, which is managed by Mapbox's animation loop.\n  // This removes the synchronization issue caused by requestAnimationFrame.\n  redraw() {\n    const map = this._map;\n    // map._render will throw error if style does not exist\n    // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513\n    //   /src/ui/map.js#L1834\n    if (!this._inRender && map.style) {\n      // cancel the scheduled update\n      if (map._frame) {\n        map._frame.cancel();\n        map._frame = null;\n      }\n      // the order is important - render() may schedule another update\n      map._render();\n    }\n  }\n\n  _createShadowTransform(map: any) {\n    const renderTransform = cloneTransform(map.transform);\n    map.painter.transform = renderTransform;\n\n    this._renderTransform = renderTransform;\n  }\n\n  /* Trigger map resize if size is controlled\n     @param {object} nextProps\n     @returns {bool} true if size has changed\n   */\n  _updateSize(nextProps: MapboxProps): boolean {\n    // Check if size is controlled\n    const {viewState} = nextProps;\n    if (viewState) {\n      const map = this._map;\n      if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {\n        map.resize();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Adapted from map.jumpTo\n  /* Update camera to match props\n     @param {object} nextProps\n     @param {bool} triggerEvents - should fire camera events\n     @returns {bool} true if anything is changed\n   */\n  _updateViewState(nextProps: MapboxProps, triggerEvents: boolean): boolean {\n    if (this._internalUpdate) {\n      return false;\n    }\n    const map = this._map;\n\n    const tr = this._renderTransform;\n    // Take a snapshot of the transform before mutation\n    const {zoom, pitch, bearing} = tr;\n    const isMoving = map.isMoving();\n\n    if (isMoving) {\n      // All movement of the camera is done relative to the sea level\n      tr.cameraElevationReference = 'sea';\n    }\n    const changed = applyViewStateToTransform(tr, {\n      ...transformToViewState(map.transform),\n      ...nextProps\n    });\n    if (isMoving) {\n      // Reset camera reference\n      tr.cameraElevationReference = 'ground';\n    }\n\n    if (changed && triggerEvents) {\n      const deferredEvents = this._deferredEvents;\n      // Delay DOM control updates to the next render cycle\n      deferredEvents.move = true;\n      deferredEvents.zoom ||= zoom !== tr.zoom;\n      deferredEvents.rotate ||= bearing !== tr.bearing;\n      deferredEvents.pitch ||= pitch !== tr.pitch;\n    }\n\n    // Avoid manipulating the real transform when interaction/animation is ongoing\n    // as it would interfere with Mapbox's handlers\n    if (!isMoving) {\n      applyViewStateToTransform(map.transform, nextProps);\n    }\n\n    return changed;\n  }\n\n  /* Update camera constraints and projection settings to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateSettings(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    for (const propName of settingNames) {\n      if (propName in nextProps && !deepEqual(nextProps[propName], currProps[propName])) {\n        changed = true;\n        map[`set${propName[0].toUpperCase()}${propName.slice(1)}`](nextProps[propName]);\n      }\n    }\n    return changed;\n  }\n\n  /* Update map style to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if style is changed\n   */\n  _updateStyle(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    if (nextProps.cursor !== currProps.cursor) {\n      this._map.getCanvas().style.cursor = nextProps.cursor;\n    }\n    if (nextProps.mapStyle !== currProps.mapStyle) {\n      const options: any = {\n        diff: nextProps.styleDiffing\n      };\n      if ('localIdeographFontFamily' in nextProps) {\n        options.localIdeographFontFamily = nextProps.localIdeographFontFamily;\n      }\n      this._map.setStyle(normalizeStyle(nextProps.mapStyle), options);\n      return true;\n    }\n    return false;\n  }\n\n  /* Update fog, light and terrain to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateStyleComponents(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    if (map.style.loaded()) {\n      if ('light' in nextProps && !deepEqual(nextProps.light, currProps.light)) {\n        changed = true;\n        map.setLight(nextProps.light);\n      }\n      if ('fog' in nextProps && !deepEqual(nextProps.fog, currProps.fog)) {\n        changed = true;\n        map.setFog(nextProps.fog);\n      }\n      if ('terrain' in nextProps && !deepEqual(nextProps.terrain, currProps.terrain)) {\n        if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {\n          changed = true;\n          map.setTerrain(nextProps.terrain);\n        }\n      }\n    }\n    return changed;\n  }\n\n  /* Update interaction handlers to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateHandlers(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    for (const propName of handlerNames) {\n      const newValue = nextProps[propName];\n      if (!deepEqual(newValue, currProps[propName])) {\n        changed = true;\n        if (newValue) {\n          map[propName].enable(newValue);\n        } else {\n          map[propName].disable();\n        }\n      }\n    }\n    return changed;\n  }\n\n  _onEvent = (e: MapboxEvent) => {\n    // @ts-ignore\n    const cb = this.props[otherEvents[e.type]];\n    if (cb) {\n      cb(e);\n    }\n  };\n\n  private _queryRenderedFeatures(point: Point) {\n    const map = this._map;\n    const {interactiveLayerIds = []} = this.props;\n    try {\n      return map.queryRenderedFeatures(point, {\n        layers: interactiveLayerIds.filter(map.getLayer.bind(map))\n      });\n    } catch {\n      // May fail if style is not loaded\n      return [];\n    }\n  }\n\n  _updateHover(e: MapMouseEvent) {\n    const {props} = this;\n    const shouldTrackHoveredFeatures =\n      props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);\n\n    if (shouldTrackHoveredFeatures) {\n      const eventType = e.type;\n      const wasHovering = this._hoveredFeatures?.length > 0;\n      const features = this._queryRenderedFeatures(e.point);\n      const isHovering = features.length > 0;\n\n      if (!isHovering && wasHovering) {\n        e.type = 'mouseleave';\n        this._onPointerEvent(e);\n      }\n      this._hoveredFeatures = features;\n      if (isHovering && !wasHovering) {\n        e.type = 'mouseenter';\n        this._onPointerEvent(e);\n      }\n      e.type = eventType;\n    } else {\n      this._hoveredFeatures = null;\n    }\n  }\n\n  _onPointerEvent = (e: MapLayerMouseEvent | MapLayerTouchEvent) => {\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      this._updateHover(e);\n    }\n\n    // @ts-ignore\n    const cb = this.props[pointerEvents[e.type]];\n    if (cb) {\n      if (this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {\n        e.features = this._hoveredFeatures || this._queryRenderedFeatures(e.point);\n      }\n      cb(e);\n      delete e.features;\n    }\n  };\n\n  _onCameraEvent = (e: ViewStateChangeEvent) => {\n    if (!this._internalUpdate) {\n      // @ts-ignore\n      const cb = this.props[cameraEvents[e.type]];\n      if (cb) {\n        cb(e);\n      }\n    }\n    if (e.type in this._deferredEvents) {\n      this._deferredEvents[e.type] = false;\n    }\n  };\n\n  _fireEvent(baseFire: Function, event: string | MapboxEvent, properties?: object) {\n    const map = this._map;\n    const tr = map.transform;\n\n    const eventType = typeof event === 'string' ? event : event.type;\n    if (eventType === 'move') {\n      this._updateViewState(this.props, false);\n    }\n    if (eventType in cameraEvents) {\n      if (typeof event === 'object') {\n        (event as unknown as ViewStateChangeEvent).viewState = transformToViewState(tr);\n      }\n      if (this._map.isMoving()) {\n        // Replace map.transform with ours during the callbacks\n        map.transform = this._renderTransform;\n        baseFire.call(map, event, properties);\n        map.transform = tr;\n\n        return map;\n      }\n    }\n    baseFire.call(map, event, properties);\n\n    return map;\n  }\n\n  // All camera manipulations are complete, ready to repaint\n  _onBeforeRepaint() {\n    const map = this._map;\n\n    // If there are camera changes driven by props, invoke camera events so that DOM controls are synced\n    this._internalUpdate = true;\n    for (const eventType in this._deferredEvents) {\n      if (this._deferredEvents[eventType]) {\n        map.fire(eventType);\n      }\n    }\n    this._internalUpdate = false;\n\n    const tr = this._map.transform;\n    // Make sure camera matches the current props\n    this._map.transform = this._renderTransform;\n\n    this._onAfterRepaint = () => {\n      // Restores camera state before render/load events are fired\n      this._map.transform = tr;\n    };\n  }\n\n  _onAfterRepaint: () => void;\n}\n\n/**\n * Access token can be provided via one of:\n *   mapboxAccessToken prop\n *   access_token query parameter\n *   MapboxAccessToken environment variable\n *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable\n * @returns access token\n */\nfunction getAccessTokenFromEnv(): string {\n  let accessToken = null;\n\n  /* global location, process */\n  if (typeof location !== 'undefined') {\n    const match = /access_token=([^&\\/]*)/.exec(location.search);\n    accessToken = match && match[1];\n  }\n\n  // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly\n  try {\n    accessToken = accessToken || process.env.MapboxAccessToken;\n  } catch {\n    // ignore\n  }\n\n  try {\n    accessToken = accessToken || process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  } catch {\n    // ignore\n  }\n\n  return accessToken;\n}\n"],"mappings":"AAAA,SAAQA,oBAAoB,EAAEC,yBAAyB,EAAEC,cAAc,QAAO,oBAAoB;AAClG,SAAQC,cAAc,QAAO,sBAAsB;AACnD,SAAQC,SAAS,QAAO,qBAAqB;AAuU7C,MAAMC,aAAa,GAAG;EACpBC,SAAS,EAAE,aAAa;EACxBC,OAAO,EAAE,WAAW;EACpBC,SAAS,EAAE,aAAa;EACxBC,SAAS,EAAE,aAAa;EACxBC,KAAK,EAAE,SAAS;EAChBC,QAAQ,EAAE,YAAY;EACtBC,UAAU,EAAE,cAAc;EAC1BC,UAAU,EAAE,cAAc;EAC1BC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,eAAe;EAC5BC,UAAU,EAAE,cAAc;EAC1BC,QAAQ,EAAE,YAAY;EACtBC,SAAS,EAAE,aAAa;EACxBC,WAAW,EAAE;CACd;AACD,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,aAAa;EACxBC,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAE,WAAW;EACpBC,SAAS,EAAE,aAAa;EACxBC,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAE,WAAW;EACpBC,SAAS,EAAE,aAAa;EACxBC,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAE,WAAW;EACpBC,WAAW,EAAE,eAAe;EAC5BC,MAAM,EAAE,UAAU;EAClBC,SAAS,EAAE,aAAa;EACxBC,UAAU,EAAE,cAAc;EAC1BC,KAAK,EAAE,SAAS;EAChBC,QAAQ,EAAE;CACX;AACD,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,SAAS;EAChBC,YAAY,EAAE,gBAAgB;EAC9BC,UAAU,EAAE,cAAc;EAC1BC,aAAa,EAAE,iBAAiB;EAChCC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAE,aAAa;EACxBC,UAAU,EAAE,cAAc;EAC1BC,KAAK,EAAE;CACR;AACD,MAAMC,YAAY,GAA0B,CAC1C,SAAS,EACT,SAAS,EACT,UAAU,EACV,UAAU,EACV,WAAW,EACX,YAAY,EACZ,mBAAmB,CACpB;AACD,MAAMC,YAAY,GAA0B,CAC1C,YAAY,EACZ,SAAS,EACT,YAAY,EACZ,SAAS,EACT,UAAU,EACV,iBAAiB,EACjB,iBAAiB,EACjB,YAAY,CACb;AAED;;;AAGA,eAAc,MAAOC,MAAM;EAkCzBC,YAAYC,QAA0B,EAAEC,KAAkB,EAAEC,SAAyB;IAhCrF;IACA;IACQ,KAAAC,IAAI,GAAQ,IAAI;IAYxB;IACQ,KAAAC,eAAe,GAAY,KAAK;IAChC,KAAAC,SAAS,GAAY,KAAK;IAC1B,KAAAC,gBAAgB,GAA2B,IAAI;IAC/C,KAAAC,eAAe,GAKnB;MACFvC,IAAI,EAAE,KAAK;MACXM,IAAI,EAAE,KAAK;MACXM,KAAK,EAAE,KAAK;MACZH,MAAM,EAAE;KACT;IA6WD,KAAA+B,QAAQ,GAAIC,CAAc,IAAI;MAC5B;MACA,MAAMC,EAAE,GAAG,IAAI,CAACT,KAAK,CAACnB,WAAW,CAAC2B,CAAC,CAACE,IAAI,CAAC,CAAC;MAC1C,IAAID,EAAE,EAAE;QACNA,EAAE,CAACD,CAAC,CAAC;;IAET,CAAC;IAyCD,KAAAG,eAAe,GAAIH,CAA0C,IAAI;MAC/D,IAAIA,CAAC,CAACE,IAAI,KAAK,WAAW,IAAIF,CAAC,CAACE,IAAI,KAAK,UAAU,EAAE;QACnD,IAAI,CAACE,YAAY,CAACJ,CAAC,CAAC;;MAGtB;MACA,MAAMC,EAAE,GAAG,IAAI,CAACT,KAAK,CAAClD,aAAa,CAAC0D,CAAC,CAACE,IAAI,CAAC,CAAC;MAC5C,IAAID,EAAE,EAAE;QACN,IAAI,IAAI,CAACT,KAAK,CAACa,mBAAmB,IAAIL,CAAC,CAACE,IAAI,KAAK,WAAW,IAAIF,CAAC,CAACE,IAAI,KAAK,UAAU,EAAE;UACrFF,CAAC,CAACM,QAAQ,GAAG,IAAI,CAACT,gBAAgB,IAAI,IAAI,CAACU,sBAAsB,CAACP,CAAC,CAACQ,KAAK,CAAC;;QAE5EP,EAAE,CAACD,CAAC,CAAC;QACL,OAAOA,CAAC,CAACM,QAAQ;;IAErB,CAAC;IAED,KAAAG,cAAc,GAAIT,CAAuB,IAAI;MAC3C,IAAI,CAAC,IAAI,CAACL,eAAe,EAAE;QACzB;QACA,MAAMM,EAAE,GAAG,IAAI,CAACT,KAAK,CAACnC,YAAY,CAAC2C,CAAC,CAACE,IAAI,CAAC,CAAC;QAC3C,IAAID,EAAE,EAAE;UACNA,EAAE,CAACD,CAAC,CAAC;;;MAGT,IAAIA,CAAC,CAACE,IAAI,IAAI,IAAI,CAACJ,eAAe,EAAE;QAClC,IAAI,CAACA,eAAe,CAACE,CAAC,CAACE,IAAI,CAAC,GAAG,KAAK;;IAExC,CAAC;IAlbC,IAAI,CAACQ,SAAS,GAAGnB,QAAQ;IACzB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACmB,WAAW,CAAClB,SAAS,CAAC;EAC7B;EAEA,IAAImB,GAAGA,CAAA;IACL,OAAO,IAAI,CAAClB,IAAiB;EAC/B;EAEA,IAAImB,SAASA,CAAA;IACX,OAAO,IAAI,CAACC,gBAAgB;EAC9B;EAEAC,QAAQA,CAACvB,KAAkB;IACzB,MAAMwB,QAAQ,GAAG,IAAI,CAACxB,KAAK;IAC3B,IAAI,CAACA,KAAK,GAAGA,KAAK;IAElB,MAAMyB,eAAe,GAAG,IAAI,CAACC,eAAe,CAAC1B,KAAK,EAAEwB,QAAQ,CAAC;IAC7D,IAAIC,eAAe,EAAE;MACnB,IAAI,CAACE,sBAAsB,CAAC,IAAI,CAACzB,IAAI,CAAC;;IAExC,MAAM0B,WAAW,GAAG,IAAI,CAACC,WAAW,CAAC7B,KAAK,CAAC;IAC3C,MAAM8B,gBAAgB,GAAG,IAAI,CAACC,gBAAgB,CAAC/B,KAAK,EAAE,IAAI,CAAC;IAC3D,IAAI,CAACgC,YAAY,CAAChC,KAAK,EAAEwB,QAAQ,CAAC;IAClC,IAAI,CAACS,sBAAsB,CAACjC,KAAK,EAAEwB,QAAQ,CAAC;IAC5C,IAAI,CAACU,eAAe,CAAClC,KAAK,EAAEwB,QAAQ,CAAC;IAErC;IACA;IACA;IACA,IAAIC,eAAe,IAAIG,WAAW,IAAKE,gBAAgB,IAAI,CAAC,IAAI,CAAC5B,IAAI,CAACiC,QAAQ,EAAG,EAAE;MACjF,IAAI,CAACC,MAAM,EAAE;;EAEjB;EAEA,OAAOC,KAAKA,CAACrC,KAAkB,EAAEC,SAAyB;IACxD,MAAMqC,IAAI,GAAGzC,MAAM,CAAC0C,SAAS,CAACC,GAAG,EAAE;IACnC,IAAI,CAACF,IAAI,EAAE;MACT,OAAO,IAAI;;IAGb,MAAMlB,GAAG,GAAGkB,IAAI,CAAClB,GAAG;IACpB;IACA;IACA;IACA,MAAMqB,YAAY,GAAGrB,GAAG,CAACsB,YAAY,EAAE;IACvCzC,SAAS,CAAC0C,SAAS,GAAGF,YAAY,CAACE,SAAS;IAC5C,OAAOF,YAAY,CAACG,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;MACzC5C,SAAS,CAAC6C,WAAW,CAACL,YAAY,CAACG,UAAU,CAAC,CAAC,CAAC,CAAC;;IAEnD;IACA;IACAxB,GAAG,CAAC2B,UAAU,GAAG9C,SAAS;IAE1B;IACA;IACA;IACA;IACA,MAAM+C,cAAc,GAAG5B,GAAG,CAAC6B,eAAe;IAC1C,IAAID,cAAc,EAAE;MAClBA,cAAc,CAACE,UAAU,EAAE;MAC3BF,cAAc,CAACG,OAAO,CAAClD,SAAS,CAAC;;IAGnC;IACAqC,IAAI,CAACf,QAAQ,CAAC;MAAC,GAAGvB,KAAK;MAAEoD,YAAY,EAAE;IAAK,CAAC,CAAC;IAC9ChC,GAAG,CAAClC,MAAM,EAAE;IACZ,MAAM;MAACmE;IAAgB,CAAC,GAAGrD,KAAK;IAChC,IAAIqD,gBAAgB,EAAE;MACpB,IAAIA,gBAAgB,CAACC,MAAM,EAAE;QAC3BlC,GAAG,CAACmC,SAAS,CAACF,gBAAgB,CAACC,MAAM,EAAE;UAAC,GAAGD,gBAAgB,CAACG,gBAAgB;UAAEC,QAAQ,EAAE;QAAC,CAAC,CAAC;OAC5F,MAAM;QACLnB,IAAI,CAACP,gBAAgB,CAACsB,gBAAgB,EAAE,KAAK,CAAC;;;IAIlD;IACA,IAAIjC,GAAG,CAACsC,aAAa,EAAE,EAAE;MACvBtC,GAAG,CAACuC,IAAI,CAAC,MAAM,CAAC;KACjB,MAAM;MACLvC,GAAG,CAACwC,IAAI,CAAC,WAAW,EAAE,MAAMxC,GAAG,CAACuC,IAAI,CAAC,MAAM,CAAC,CAAC;;IAG/C;IACA;IACAvC,GAAG,CAACyC,OAAO,EAAE;IACb,OAAOvB,IAAI;EACb;EAEA;EACAnB,WAAWA,CAAClB,SAAyB;IACnC,MAAM;MAACD;IAAK,CAAC,GAAG,IAAI;IACpB,MAAM8D,UAAU,GAAG;MACjB,GAAG9D,KAAK;MACR,GAAGA,KAAK,CAACqD,gBAAgB;MACzBU,WAAW,EAAE/D,KAAK,CAACgE,iBAAiB,IAAIC,qBAAqB,EAAE,IAAI,IAAI;MACvEhE,SAAS;MACTiE,KAAK,EAAEtH,cAAc,CAACoD,KAAK,CAACmE,QAAQ;KACrC;IAED,MAAMC,SAAS,GAAGN,UAAU,CAACT,gBAAgB,IAAIS,UAAU,CAACM,SAAS,IAAIN,UAAU;IACnFO,MAAM,CAACC,MAAM,CAACR,UAAU,EAAE;MACxBS,MAAM,EAAE,CAACH,SAAS,CAACI,SAAS,IAAI,CAAC,EAAEJ,SAAS,CAACK,QAAQ,IAAI,CAAC,CAAC;MAC3DpG,IAAI,EAAE+F,SAAS,CAAC/F,IAAI,IAAI,CAAC;MACzBM,KAAK,EAAEyF,SAAS,CAACzF,KAAK,IAAI,CAAC;MAC3B+F,OAAO,EAAEN,SAAS,CAACM,OAAO,IAAI;KAC/B,CAAC;IAEF,IAAI1E,KAAK,CAAC2E,EAAE,EAAE;MACZ;MACA,MAAMC,UAAU,GAAGC,iBAAiB,CAACC,SAAS,CAACF,UAAU;MACzD;MACA;MACA;MACAC,iBAAiB,CAACC,SAAS,CAACF,UAAU,GAAG,MAAK;QAC5C;QACAC,iBAAiB,CAACC,SAAS,CAACF,UAAU,GAAGA,UAAU;QACnD,OAAO5E,KAAK,CAAC2E,EAAE;MACjB,CAAC;;IAGH,MAAMvD,GAAG,GAAQ,IAAI,IAAI,CAACF,SAAS,CAAC4C,UAAU,CAAC;IAC/C;IACA,IAAIM,SAAS,CAACW,OAAO,EAAE;MACrB3D,GAAG,CAAC4D,UAAU,CAACZ,SAAS,CAACW,OAAO,CAAC;;IAEnC,IAAI/E,KAAK,CAACiF,MAAM,EAAE;MAChB7D,GAAG,CAAC8D,SAAS,EAAE,CAAChB,KAAK,CAACe,MAAM,GAAGjF,KAAK,CAACiF,MAAM;;IAE7C,IAAI,CAACtD,sBAAsB,CAACP,GAAG,CAAC;IAEhC;IACA;IACA,MAAM+D,SAAS,GAAG/D,GAAG,CAACgE,OAAO;IAC7BhE,GAAG,CAACgE,OAAO,GAAIC,GAAW,IAAI;MAC5B,IAAI,CAACjF,SAAS,GAAG,IAAI;MACrB+E,SAAS,CAACG,IAAI,CAAClE,GAAG,EAAEiE,GAAG,CAAC;MACxB,IAAI,CAACjF,SAAS,GAAG,KAAK;IACxB,CAAC;IACD,MAAMmF,kBAAkB,GAAGnE,GAAG,CAACoE,gBAAgB,CAACC,GAAG;IACnDrE,GAAG,CAACoE,gBAAgB,CAACC,GAAG,GAAIJ,GAAW,IAAI;MACzCE,kBAAkB,CAACD,IAAI,CAAClE,GAAG,CAACoE,gBAAgB,EAAEH,GAAG,CAAC;MAClD,IAAI,CAACK,gBAAgB,EAAE;IACzB,CAAC;IACDtE,GAAG,CAACuE,EAAE,CAAC,QAAQ,EAAE,MAAM,IAAI,CAACC,eAAe,EAAE,CAAC;IAC9C;IACA,MAAMC,SAAS,GAAGzE,GAAG,CAACuC,IAAI;IAC1BvC,GAAG,CAACuC,IAAI,GAAG,IAAI,CAACmC,UAAU,CAACC,IAAI,CAAC,IAAI,EAAEF,SAAS,CAAC;IAEhD;IACAzE,GAAG,CAACuE,EAAE,CAAC,QAAQ,EAAE,MAAK;MACpB,IAAI,CAACrE,gBAAgB,CAACpC,MAAM,CAACkC,GAAG,CAACC,SAAS,CAAC2E,KAAK,EAAE5E,GAAG,CAACC,SAAS,CAAC4E,MAAM,CAAC;IACzE,CAAC,CAAC;IACF7E,GAAG,CAACuE,EAAE,CAAC,WAAW,EAAE,MAAM,IAAI,CAAC1D,sBAAsB,CAAC,IAAI,CAACjC,KAAK,EAAE,EAAE,CAAC,CAAC;IACtEoB,GAAG,CAACuE,EAAE,CAAC,YAAY,EAAE,MAAM,IAAI,CAAC1D,sBAAsB,CAAC,IAAI,CAACjC,KAAK,EAAE,EAAE,CAAC,CAAC;IACvE,KAAK,MAAMkG,SAAS,IAAIpJ,aAAa,EAAE;MACrCsE,GAAG,CAACuE,EAAE,CAACO,SAAS,EAAE,IAAI,CAACvF,eAAe,CAAC;;IAEzC,KAAK,MAAMuF,SAAS,IAAIrI,YAAY,EAAE;MACpCuD,GAAG,CAACuE,EAAE,CAACO,SAAS,EAAE,IAAI,CAACjF,cAAc,CAAC;;IAExC,KAAK,MAAMiF,SAAS,IAAIrH,WAAW,EAAE;MACnCuC,GAAG,CAACuE,EAAE,CAACO,SAAS,EAAE,IAAI,CAAC3F,QAAQ,CAAC;;IAElC,IAAI,CAACL,IAAI,GAAGkB,GAAG;EACjB;EACA;EAEA+E,OAAOA,CAAA;IACL;IACA,MAAMlG,SAAS,GAAG,IAAI,CAACmB,GAAG,CAACsB,YAAY,EAAE;IACzC,MAAM0D,QAAQ,GAAGnG,SAAS,CAACoG,aAAa,CAAC,qBAAqB,CAAC;IAC/DD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE9G,MAAM,EAAE;IAElBO,MAAM,CAAC0C,SAAS,CAAC+D,IAAI,CAAC,IAAI,CAAC;EAC7B;EAEAC,OAAOA,CAAA;IACL,IAAI,CAACrG,IAAI,CAACZ,MAAM,EAAE;EACpB;EAEA;EACA;EACA;EACA8C,MAAMA,CAAA;IACJ,MAAMhB,GAAG,GAAG,IAAI,CAAClB,IAAI;IACrB;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAACE,SAAS,IAAIgB,GAAG,CAAC8C,KAAK,EAAE;MAChC;MACA,IAAI9C,GAAG,CAACoF,MAAM,EAAE;QACdpF,GAAG,CAACoF,MAAM,CAACC,MAAM,EAAE;QACnBrF,GAAG,CAACoF,MAAM,GAAG,IAAI;;MAEnB;MACApF,GAAG,CAACgE,OAAO,EAAE;;EAEjB;EAEAzD,sBAAsBA,CAACP,GAAQ;IAC7B,MAAMsF,eAAe,GAAG/J,cAAc,CAACyE,GAAG,CAACC,SAAS,CAAC;IACrDD,GAAG,CAACuF,OAAO,CAACtF,SAAS,GAAGqF,eAAe;IAEvC,IAAI,CAACpF,gBAAgB,GAAGoF,eAAe;EACzC;EAEA;;;;EAIA7E,WAAWA,CAAC+E,SAAsB;IAChC;IACA,MAAM;MAACxC;IAAS,CAAC,GAAGwC,SAAS;IAC7B,IAAIxC,SAAS,EAAE;MACb,MAAMhD,GAAG,GAAG,IAAI,CAAClB,IAAI;MACrB,IAAIkE,SAAS,CAAC4B,KAAK,KAAK5E,GAAG,CAACC,SAAS,CAAC2E,KAAK,IAAI5B,SAAS,CAAC6B,MAAM,KAAK7E,GAAG,CAACC,SAAS,CAAC4E,MAAM,EAAE;QACxF7E,GAAG,CAAClC,MAAM,EAAE;QACZ,OAAO,IAAI;;;IAGf,OAAO,KAAK;EACd;EAEA;EACA;;;;;EAKA6C,gBAAgBA,CAAC6E,SAAsB,EAAEC,aAAsB;IAC7D,IAAI,IAAI,CAAC1G,eAAe,EAAE;MACxB,OAAO,KAAK;;IAEd,MAAMiB,GAAG,GAAG,IAAI,CAAClB,IAAI;IAErB,MAAM4G,EAAE,GAAG,IAAI,CAACxF,gBAAgB;IAChC;IACA,MAAM;MAACjD,IAAI;MAAEM,KAAK;MAAE+F;IAAO,CAAC,GAAGoC,EAAE;IACjC,MAAM3E,QAAQ,GAAGf,GAAG,CAACe,QAAQ,EAAE;IAE/B,IAAIA,QAAQ,EAAE;MACZ;MACA2E,EAAE,CAACC,wBAAwB,GAAG,KAAK;;IAErC,MAAMC,OAAO,GAAGtK,yBAAyB,CAACoK,EAAE,EAAE;MAC5C,GAAGrK,oBAAoB,CAAC2E,GAAG,CAACC,SAAS,CAAC;MACtC,GAAGuF;KACJ,CAAC;IACF,IAAIzE,QAAQ,EAAE;MACZ;MACA2E,EAAE,CAACC,wBAAwB,GAAG,QAAQ;;IAGxC,IAAIC,OAAO,IAAIH,aAAa,EAAE;MAC5B,MAAMI,cAAc,GAAG,IAAI,CAAC3G,eAAe;MAC3C;MACA2G,cAAc,CAAClJ,IAAI,GAAG,IAAI;MAC1BkJ,cAAc,CAAC5I,IAAI,KAAnB4I,cAAc,CAAC5I,IAAI,GAAKA,IAAI,KAAKyI,EAAE,CAACzI,IAAI;MACxC4I,cAAc,CAACzI,MAAM,KAArByI,cAAc,CAACzI,MAAM,GAAKkG,OAAO,KAAKoC,EAAE,CAACpC,OAAO;MAChDuC,cAAc,CAACtI,KAAK,KAApBsI,cAAc,CAACtI,KAAK,GAAKA,KAAK,KAAKmI,EAAE,CAACnI,KAAK;;IAG7C;IACA;IACA,IAAI,CAACwD,QAAQ,EAAE;MACbzF,yBAAyB,CAAC0E,GAAG,CAACC,SAAS,EAAEuF,SAAS,CAAC;;IAGrD,OAAOI,OAAO;EAChB;EAEA;;;;;EAKAtF,eAAeA,CAACkF,SAAsB,EAAEM,SAAsB;IAC5D,MAAM9F,GAAG,GAAG,IAAI,CAAClB,IAAI;IACrB,IAAI8G,OAAO,GAAG,KAAK;IACnB,KAAK,MAAMG,QAAQ,IAAIxH,YAAY,EAAE;MACnC,IAAIwH,QAAQ,IAAIP,SAAS,IAAI,CAAC/J,SAAS,CAAC+J,SAAS,CAACO,QAAQ,CAAC,EAAED,SAAS,CAACC,QAAQ,CAAC,CAAC,EAAE;QACjFH,OAAO,GAAG,IAAI;QACd5F,GAAG,CAAC,MAAM+F,QAAQ,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGD,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAACT,SAAS,CAACO,QAAQ,CAAC,CAAC;;;IAGnF,OAAOH,OAAO;EAChB;EAEA;;;;;EAKAhF,YAAYA,CAAC4E,SAAsB,EAAEM,SAAsB;IACzD,IAAIN,SAAS,CAAC3B,MAAM,KAAKiC,SAAS,CAACjC,MAAM,EAAE;MACzC,IAAI,CAAC/E,IAAI,CAACgF,SAAS,EAAE,CAAChB,KAAK,CAACe,MAAM,GAAG2B,SAAS,CAAC3B,MAAM;;IAEvD,IAAI2B,SAAS,CAACzC,QAAQ,KAAK+C,SAAS,CAAC/C,QAAQ,EAAE;MAC7C,MAAMmD,OAAO,GAAQ;QACnBC,IAAI,EAAEX,SAAS,CAACxD;OACjB;MACD,IAAI,0BAA0B,IAAIwD,SAAS,EAAE;QAC3CU,OAAO,CAACE,wBAAwB,GAAGZ,SAAS,CAACY,wBAAwB;;MAEvE,IAAI,CAACtH,IAAI,CAACuH,QAAQ,CAAC7K,cAAc,CAACgK,SAAS,CAACzC,QAAQ,CAAC,EAAEmD,OAAO,CAAC;MAC/D,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEA;;;;;EAKArF,sBAAsBA,CAAC2E,SAAsB,EAAEM,SAAsB;IACnE,MAAM9F,GAAG,GAAG,IAAI,CAAClB,IAAI;IACrB,IAAI8G,OAAO,GAAG,KAAK;IACnB,IAAI5F,GAAG,CAAC8C,KAAK,CAACwD,MAAM,EAAE,EAAE;MACtB,IAAI,OAAO,IAAId,SAAS,IAAI,CAAC/J,SAAS,CAAC+J,SAAS,CAACe,KAAK,EAAET,SAAS,CAACS,KAAK,CAAC,EAAE;QACxEX,OAAO,GAAG,IAAI;QACd5F,GAAG,CAACwG,QAAQ,CAAChB,SAAS,CAACe,KAAK,CAAC;;MAE/B,IAAI,KAAK,IAAIf,SAAS,IAAI,CAAC/J,SAAS,CAAC+J,SAAS,CAACiB,GAAG,EAAEX,SAAS,CAACW,GAAG,CAAC,EAAE;QAClEb,OAAO,GAAG,IAAI;QACd5F,GAAG,CAAC0G,MAAM,CAAClB,SAAS,CAACiB,GAAG,CAAC;;MAE3B,IAAI,SAAS,IAAIjB,SAAS,IAAI,CAAC/J,SAAS,CAAC+J,SAAS,CAACmB,OAAO,EAAEb,SAAS,CAACa,OAAO,CAAC,EAAE;QAC9E,IAAI,CAACnB,SAAS,CAACmB,OAAO,IAAI3G,GAAG,CAAC4G,SAAS,CAACpB,SAAS,CAACmB,OAAO,CAACE,MAAM,CAAC,EAAE;UACjEjB,OAAO,GAAG,IAAI;UACd5F,GAAG,CAAC8G,UAAU,CAACtB,SAAS,CAACmB,OAAO,CAAC;;;;IAIvC,OAAOf,OAAO;EAChB;EAEA;;;;;EAKA9E,eAAeA,CAAC0E,SAAsB,EAAEM,SAAsB;IAC5D,MAAM9F,GAAG,GAAG,IAAI,CAAClB,IAAI;IACrB,IAAI8G,OAAO,GAAG,KAAK;IACnB,KAAK,MAAMG,QAAQ,IAAIvH,YAAY,EAAE;MACnC,MAAMuI,QAAQ,GAAGvB,SAAS,CAACO,QAAQ,CAAC;MACpC,IAAI,CAACtK,SAAS,CAACsL,QAAQ,EAAEjB,SAAS,CAACC,QAAQ,CAAC,CAAC,EAAE;QAC7CH,OAAO,GAAG,IAAI;QACd,IAAImB,QAAQ,EAAE;UACZ/G,GAAG,CAAC+F,QAAQ,CAAC,CAACiB,MAAM,CAACD,QAAQ,CAAC;SAC/B,MAAM;UACL/G,GAAG,CAAC+F,QAAQ,CAAC,CAACkB,OAAO,EAAE;;;;IAI7B,OAAOrB,OAAO;EAChB;EAUQjG,sBAAsBA,CAACC,KAAY;IACzC,MAAMI,GAAG,GAAG,IAAI,CAAClB,IAAI;IACrB,MAAM;MAACW,mBAAmB,GAAG;IAAE,CAAC,GAAG,IAAI,CAACb,KAAK;IAC7C,IAAI;MACF,OAAOoB,GAAG,CAACkH,qBAAqB,CAACtH,KAAK,EAAE;QACtCuH,MAAM,EAAE1H,mBAAmB,CAAC2H,MAAM,CAACpH,GAAG,CAACqH,QAAQ,CAAC1C,IAAI,CAAC3E,GAAG,CAAC;OAC1D,CAAC;KACH,CAAC,OAAAsH,EAAA,EAAM;MACN;MACA,OAAO,EAAE;;EAEb;EAEA9H,YAAYA,CAACJ,CAAgB;;IAC3B,MAAM;MAACR;IAAK,CAAC,GAAG,IAAI;IACpB,MAAM2I,0BAA0B,GAC9B3I,KAAK,CAACa,mBAAmB,KAAKb,KAAK,CAAC4I,WAAW,IAAI5I,KAAK,CAAC6I,YAAY,IAAI7I,KAAK,CAAC8I,YAAY,CAAC;IAE9F,IAAIH,0BAA0B,EAAE;MAC9B,MAAMI,SAAS,GAAGvI,CAAC,CAACE,IAAI;MACxB,MAAMsI,WAAW,GAAG,EAAAN,EAAA,OAAI,CAACrI,gBAAgB,cAAAqI,EAAA,uBAAAA,EAAA,CAAE7F,MAAM,IAAG,CAAC;MACrD,MAAM/B,QAAQ,GAAG,IAAI,CAACC,sBAAsB,CAACP,CAAC,CAACQ,KAAK,CAAC;MACrD,MAAMiI,UAAU,GAAGnI,QAAQ,CAAC+B,MAAM,GAAG,CAAC;MAEtC,IAAI,CAACoG,UAAU,IAAID,WAAW,EAAE;QAC9BxI,CAAC,CAACE,IAAI,GAAG,YAAY;QACrB,IAAI,CAACC,eAAe,CAACH,CAAC,CAAC;;MAEzB,IAAI,CAACH,gBAAgB,GAAGS,QAAQ;MAChC,IAAImI,UAAU,IAAI,CAACD,WAAW,EAAE;QAC9BxI,CAAC,CAACE,IAAI,GAAG,YAAY;QACrB,IAAI,CAACC,eAAe,CAACH,CAAC,CAAC;;MAEzBA,CAAC,CAACE,IAAI,GAAGqI,SAAS;KACnB,MAAM;MACL,IAAI,CAAC1I,gBAAgB,GAAG,IAAI;;EAEhC;EA+BAyF,UAAUA,CAACoD,QAAkB,EAAEC,KAA2B,EAAEC,UAAmB;IAC7E,MAAMhI,GAAG,GAAG,IAAI,CAAClB,IAAI;IACrB,MAAM4G,EAAE,GAAG1F,GAAG,CAACC,SAAS;IAExB,MAAM0H,SAAS,GAAG,OAAOI,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACzI,IAAI;IAChE,IAAIqI,SAAS,KAAK,MAAM,EAAE;MACxB,IAAI,CAAChH,gBAAgB,CAAC,IAAI,CAAC/B,KAAK,EAAE,KAAK,CAAC;;IAE1C,IAAI+I,SAAS,IAAIlL,YAAY,EAAE;MAC7B,IAAI,OAAOsL,KAAK,KAAK,QAAQ,EAAE;QAC5BA,KAAyC,CAAC/E,SAAS,GAAG3H,oBAAoB,CAACqK,EAAE,CAAC;;MAEjF,IAAI,IAAI,CAAC5G,IAAI,CAACiC,QAAQ,EAAE,EAAE;QACxB;QACAf,GAAG,CAACC,SAAS,GAAG,IAAI,CAACC,gBAAgB;QACrC4H,QAAQ,CAAC5D,IAAI,CAAClE,GAAG,EAAE+H,KAAK,EAAEC,UAAU,CAAC;QACrChI,GAAG,CAACC,SAAS,GAAGyF,EAAE;QAElB,OAAO1F,GAAG;;;IAGd8H,QAAQ,CAAC5D,IAAI,CAAClE,GAAG,EAAE+H,KAAK,EAAEC,UAAU,CAAC;IAErC,OAAOhI,GAAG;EACZ;EAEA;EACAsE,gBAAgBA,CAAA;IACd,MAAMtE,GAAG,GAAG,IAAI,CAAClB,IAAI;IAErB;IACA,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,KAAK,MAAM4I,SAAS,IAAI,IAAI,CAACzI,eAAe,EAAE;MAC5C,IAAI,IAAI,CAACA,eAAe,CAACyI,SAAS,CAAC,EAAE;QACnC3H,GAAG,CAACuC,IAAI,CAACoF,SAAS,CAAC;;;IAGvB,IAAI,CAAC5I,eAAe,GAAG,KAAK;IAE5B,MAAM2G,EAAE,GAAG,IAAI,CAAC5G,IAAI,CAACmB,SAAS;IAC9B;IACA,IAAI,CAACnB,IAAI,CAACmB,SAAS,GAAG,IAAI,CAACC,gBAAgB;IAE3C,IAAI,CAACsE,eAAe,GAAG,MAAK;MAC1B;MACA,IAAI,CAAC1F,IAAI,CAACmB,SAAS,GAAGyF,EAAE;IAC1B,CAAC;EACH;;AAteOjH,MAAA,CAAA0C,SAAS,GAAa,EAAE;AA2ejC;;;;;;;;AAQA,SAAS0B,qBAAqBA,CAAA;EAC5B,IAAIF,WAAW,GAAG,IAAI;EAEtB;EACA,IAAI,OAAOsF,QAAQ,KAAK,WAAW,EAAE;IACnC,MAAMC,KAAK,GAAG,wBAAwB,CAACC,IAAI,CAACF,QAAQ,CAACG,MAAM,CAAC;IAC5DzF,WAAW,GAAGuF,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC;;EAGjC;EACA,IAAI;IACFvF,WAAW,GAAGA,WAAW,IAAI0F,OAAO,CAACC,GAAG,CAACC,iBAAiB;GAC3D,CAAC,OAAAjB,EAAA,EAAM;IACN;EAAA;EAGF,IAAI;IACF3E,WAAW,GAAGA,WAAW,IAAI0F,OAAO,CAACC,GAAG,CAACE,6BAA6B;GACvE,CAAC,OAAAC,EAAA,EAAM;IACN;EAAA;EAGF,OAAO9F,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}