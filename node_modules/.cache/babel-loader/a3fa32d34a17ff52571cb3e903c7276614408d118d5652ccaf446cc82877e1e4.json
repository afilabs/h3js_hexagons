{"ast":null,"code":"var _jsxFileName = \"/Users/afian/Documents/node_apps/h3js-learning/src/components/MapBoxMultipleHexDemand.jsx\",\n  _s = $RefreshSig$();\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport Map, { Layer, Source, MapRef, Marker } from \"react-map-gl\";\nimport React, { useRef, useState } from \"react\";\nimport { latLngToCell, cellToBoundary } from \"h3-js\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst singaporeHexagonsObj = require('../data/singapore_hexagons.json');\nconst singaporeHexagonsArr = [];\nvar maxBookingCount = 0;\nvar minBookingCount = Infinity;\n\n// Convert hexagons object to an array for easier data management\nfunction initHexagonArr() {\n  for (const hexagon in singaporeHexagonsObj) {\n    singaporeHexagonsArr.push({\n      hexindex7: hexagon\n    });\n  }\n}\nfunction updateMinMaxBookingCounts() {\n  for (const hexagon in singaporeHexagonsObj) {\n    // console.log(singaporeHexagonsObj[hexagon]);\n    if (singaporeHexagonsObj[hexagon] > maxBookingCount) {\n      maxBookingCount = parseInt(singaporeHexagonsObj[hexagon]);\n    }\n    if (singaporeHexagonsObj[hexagon] < minBookingCount) {\n      minBookingCount = parseInt(singaporeHexagonsObj[hexagon]);\n    }\n  }\n  console.log(\"min: \" + minBookingCount + \" / \" + \"max: \" + maxBookingCount);\n}\n\n// Count how many bookings are in each hexagon\nfunction updateHexagonBookingCounts(bookings) {\n  bookings.forEach(element => {\n    // console.log(element);\n\n    if (element.latitude != null && element.longitude != null) {\n      const bookingHexindex7 = latLngToCell(parseFloat(element.latitude), parseFloat(element.longitude), 7);\n\n      // If the booking falls in a specific hexagon, increment the booking count\n      if (singaporeHexagonsObj.hasOwnProperty(bookingHexindex7)) {\n        singaporeHexagonsObj[bookingHexindex7]++;\n      }\n    } else {\n      console.log(\"missing data: \" + element.taxi_id);\n    }\n  });\n}\nfunction MapBox() {\n  _s();\n  const [arr, setArr] = useState([]);\n  const onLoad = () => {\n    // console.log(\"onLoad() called\");\n    initHexagonArr();\n    getData();\n  };\n  async function getData() {\n    const response = await fetch(\"./assets/booking_data.csv\");\n\n    // console.log(response);\n\n    if (response) {\n      var _response$body;\n      const reader = response === null || response === void 0 ? void 0 : (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();\n      const result = await (reader === null || reader === void 0 ? void 0 : reader.read()); // raw array\n\n      const decoder = new TextDecoder(\"utf-8\");\n      const csv = decoder.decode(result === null || result === void 0 ? void 0 : result.value); // the csv text\n      const results = Papa.parse(csv, {\n        header: true\n      }); // object with { data, errors, meta }\n\n      // console.log(results);\n\n      const bookingData = results.data; // array of objects\n\n      // Iterate through booking data and check which hexagon it falls in and increment the booking count for that hexagon\n      updateHexagonBookingCounts(bookingData);\n      updateMinMaxBookingCounts();\n      console.log(singaporeHexagonsObj);\n\n      // console.log(rows);\n      // console.log(singaporeHexagonsArr);\n      const rs = singaporeHexagonsArr.map(row => {\n        const style = getStyle(row);\n        return {\n          type: \"Feature\",\n          properties: {\n            color: style.color,\n            opacity: style.opacity,\n            id: row.hexindex7\n          },\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [cellToBoundary(row.hexindex7, true)]\n          }\n        };\n      });\n      setArr(rs);\n\n      // console.log(rs);\n    }\n  }\n\n  const getStyle = row => {\n    // console.log(row);\n\n    const styles = [{\n      color: '#FEDD87',\n      opacity: 0.3\n    }, {\n      color: '#FED976',\n      opacity: 0.4\n    }, {\n      color: \"#FC9653\",\n      opacity: 0.5\n    }, {\n      color: \"#F77645\",\n      opacity: 0.6\n    }, {\n      color: \"#E14C48\",\n      opacity: 0.7\n    }];\n    const hexindex7 = row.hexindex7;\n    const hexagonBookingCount = singaporeHexagonsObj[hexindex7];\n    // const hexagonBookingCount = Math.floor(Math.random() * 10);\n\n    // Pick the style based on the normalized booking count\n    console.log(parseInt(hexagonBookingCount / (maxBookingCount - minBookingCount) * styles.length));\n    console.log(styles[Math.floor(hexagonBookingCount / (maxBookingCount - minBookingCount) * styles.length)]);\n    return styles[Math.floor(hexagonBookingCount / (maxBookingCount - minBookingCount) * styles.length)];\n    if (Number(hexagonBookingCount) === 0) {\n      return {\n        opacity: 0\n      };\n    }\n    if (Number(hexagonBookingCount) < 500) {\n      return {\n        color: '#FEDD87',\n        opacity: 0.4\n      };\n    }\n    if (Number(hexagonBookingCount) < 1000) {\n      return {\n        color: \"#FC9653\",\n        opacity: 0.5\n      };\n    }\n    if (Number(hexagonBookingCount) < 1500) {\n      return {\n        color: \"#F77645\",\n        opacity: 0.6\n      };\n    }\n    return {\n      color: \"#E14C48\",\n      opacity: 0.7\n    };\n  };\n\n  // console.log(cellToBoundary(hexindex7Id, true));\n  // console.log(\"arr:\");\n  // console.log(arr);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map\",\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        initialViewState: {\n          latitude: 1.290270,\n          longitude: 103.851959,\n          zoom: 10,\n          bearing: 0,\n          pitch: 0\n        },\n        mapStyle: \"mapbox://styles/mapbox/light-v9\",\n        mapboxAccessToken: \"pk.eyJ1IjoidGhlcHJvZiIsImEiOiJja3Q5amlqaXgxNjUwMm5wY3NrdmplbzVxIn0.C3zhU7lekidOJmARhNyBdw\",\n        style: {\n          height: \"100vh\",\n          width: \"100vw\"\n        },\n        onLoad: onLoad,\n        children: /*#__PURE__*/_jsxDEV(Source, {\n          type: \"geojson\",\n          data: {\n            type: \"FeatureCollection\",\n            features: arr\n          },\n          children: /*#__PURE__*/_jsxDEV(Layer, {\n            id: \"polyline-layer\",\n            type: \"fill\",\n            paint: {\n              'fill-outline-color': 'white',\n              \"fill-color\": [\"get\", \"color\"],\n              \"fill-opacity\": [\"get\", \"opacity\"]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 7\n  }, this);\n}\n_s(MapBox, \"zmPalv707NYovRiy5jMUzgJ2zEQ=\");\n_c = MapBox;\n;\nexport default MapBox;\nvar _c;\n$RefreshReg$(_c, \"MapBox\");","map":{"version":3,"names":["Map","Layer","Source","MapRef","Marker","React","useRef","useState","latLngToCell","cellToBoundary","Papa","jsxDEV","_jsxDEV","singaporeHexagonsObj","require","singaporeHexagonsArr","maxBookingCount","minBookingCount","Infinity","initHexagonArr","hexagon","push","hexindex7","updateMinMaxBookingCounts","parseInt","console","log","updateHexagonBookingCounts","bookings","forEach","element","latitude","longitude","bookingHexindex7","parseFloat","hasOwnProperty","taxi_id","MapBox","_s","arr","setArr","onLoad","getData","response","fetch","_response$body","reader","body","getReader","result","read","decoder","TextDecoder","csv","decode","value","results","parse","header","bookingData","data","rs","map","row","style","getStyle","type","properties","color","opacity","id","geometry","coordinates","styles","hexagonBookingCount","length","Math","floor","Number","children","className","initialViewState","zoom","bearing","pitch","mapStyle","mapboxAccessToken","height","width","features","paint","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/afian/Documents/node_apps/h3js-learning/src/components/MapBoxMultipleHexDemand.jsx"],"sourcesContent":["import \"mapbox-gl/dist/mapbox-gl.css\";\nimport Map, { Layer, Source, MapRef, Marker } from \"react-map-gl\";\nimport React, {useRef, useState } from \"react\";\nimport { latLngToCell, cellToBoundary } from \"h3-js\";\nimport Papa from \"papaparse\";\n\nconst singaporeHexagonsObj = require('../data/singapore_hexagons.json');\nconst singaporeHexagonsArr = [];\nvar maxBookingCount = 0;\nvar minBookingCount = Infinity;\n\n// Convert hexagons object to an array for easier data management\nfunction initHexagonArr() {\n  for (const hexagon in singaporeHexagonsObj) {\n    singaporeHexagonsArr.push({\n      hexindex7: hexagon\n    });\n  }\n}\n\nfunction updateMinMaxBookingCounts() {\n  for (const hexagon in singaporeHexagonsObj) {\n    // console.log(singaporeHexagonsObj[hexagon]);\n    if (singaporeHexagonsObj[hexagon] > maxBookingCount) {\n      maxBookingCount = parseInt(singaporeHexagonsObj[hexagon]);\n    }\n    if (singaporeHexagonsObj[hexagon] < minBookingCount) {\n      minBookingCount = parseInt(singaporeHexagonsObj[hexagon]);\n    }\n  }\n  console.log(\"min: \" + minBookingCount + \" / \" + \"max: \" + maxBookingCount);\n}\n\n// Count how many bookings are in each hexagon\nfunction updateHexagonBookingCounts(bookings) {\n  \n  bookings.forEach((element) => {\n\n    // console.log(element);\n\n    if (element.latitude != null && element.longitude != null) {\n      const bookingHexindex7 = latLngToCell(parseFloat(element.latitude), parseFloat(element.longitude), 7);\n\n      // If the booking falls in a specific hexagon, increment the booking count\n      if (singaporeHexagonsObj.hasOwnProperty(bookingHexindex7)) {\n        singaporeHexagonsObj[bookingHexindex7]++;\n      }\n\n    } else {\n      console.log(\"missing data: \" + element.taxi_id);\n    }\n  });\n}\n\n\nfunction MapBox() {\n\n  const [arr, setArr] = useState([]);\n\n  const onLoad = () => {\n    // console.log(\"onLoad() called\");\n    initHexagonArr();\n    getData();\n  };\n  \n\n  async function getData() {\n    const response = await fetch(\"./assets/booking_data.csv\");\n\n    // console.log(response);\n\n    if (response) {\n      const reader = response?.body?.getReader();\n      const result = await reader?.read(); // raw array\n\n\n\n      const decoder = new TextDecoder(\"utf-8\");\n      const csv = decoder.decode(result?.value); // the csv text\n      const results = Papa.parse(csv, { header: true }); // object with { data, errors, meta }\n\n      // console.log(results);\n\n      const bookingData = results.data; // array of objects\n\n      // Iterate through booking data and check which hexagon it falls in and increment the booking count for that hexagon\n      updateHexagonBookingCounts(bookingData);\n      updateMinMaxBookingCounts();\n\n      console.log(singaporeHexagonsObj);\n\n      // console.log(rows);\n      // console.log(singaporeHexagonsArr);\n      const rs = singaporeHexagonsArr.map((row) => {\n        const style = getStyle(row);\n        return {\n          type: \"Feature\",\n          properties: {\n            color: style.color,\n            opacity: style.opacity,\n            id: row.hexindex7,\n          },\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [cellToBoundary(row.hexindex7, true)],\n          },\n        };\n      });\n      setArr(rs);\n\n      // console.log(rs);\n    }\n  }\n\n  const getStyle = (row) => {\n\n    \n    // console.log(row);\n\n    const styles = [\n      {\n        color: '#FEDD87',\n        opacity: 0.3\n      },\n      {\n        color: '#FED976',\n        opacity: 0.4\n      },\n      {\n        color: \"#FC9653\",\n        opacity: 0.5,\n      },\n      {\n        color: \"#F77645\",\n        opacity: 0.6\n      },\n      {\n        color: \"#E14C48\",\n        opacity: 0.7\n      }\n    ];\n\n    const hexindex7 = row.hexindex7;\n    const hexagonBookingCount = singaporeHexagonsObj[hexindex7];\n    // const hexagonBookingCount = Math.floor(Math.random() * 10);\n\n    // Pick the style based on the normalized booking count\n    console.log(parseInt((hexagonBookingCount/(maxBookingCount - minBookingCount))*styles.length));\n    console.log(styles[Math.floor((hexagonBookingCount/(maxBookingCount - minBookingCount))*styles.length)]);\n    return styles[Math.floor((hexagonBookingCount/(maxBookingCount - minBookingCount))*styles.length)];\n\n    if (Number(hexagonBookingCount) === 0) {\n      return {opacity: 0};\n    }\n\n\n    if (Number(hexagonBookingCount) < 500) {\n      return {\n        color: '#FEDD87',\n        opacity: 0.4,\n      }\n    }\n    if (Number(hexagonBookingCount) < 1000) {\n      return {\n        color: \"#FC9653\",\n        opacity: 0.5,\n      };\n    }\n    if (Number(hexagonBookingCount) < 1500) {\n      return {\n        color: \"#F77645\",\n        opacity: 0.6\n      }\n    }\n    return {\n      color: \"#E14C48\",\n      opacity: 0.7\n    };\n  };\n\n  // console.log(cellToBoundary(hexindex7Id, true));\n  // console.log(\"arr:\");\n  // console.log(arr);\n\n\n\n  return (\n      \n      <div>\n        <div className=\"map\">\n          <Map\n            initialViewState={{\n              latitude: 1.290270,\n              longitude: 103.851959,\n              zoom: 10,\n              bearing: 0,\n              pitch: 0,\n            }}\n            mapStyle=\"mapbox://styles/mapbox/light-v9\"\n            mapboxAccessToken=\"pk.eyJ1IjoidGhlcHJvZiIsImEiOiJja3Q5amlqaXgxNjUwMm5wY3NrdmplbzVxIn0.C3zhU7lekidOJmARhNyBdw\"\n            style={{\n              height: \"100vh\",\n              width: \"100vw\",\n            }}\n            onLoad={onLoad}\n          >\n            <Source\n              type=\"geojson\"\n              data={{\n                type: \"FeatureCollection\",\n                features: arr\n              }}\n            >\n              <Layer\n                {...{\n                  id: \"polyline-layer\",\n                  type: \"fill\",\n                  paint: {\n                    'fill-outline-color': 'white',\n                    \"fill-color\": [\"get\", \"color\"],\n                    \"fill-opacity\": [\"get\", \"opacity\"],\n                  },\n                }}\n              />\n            </Source>\n            \n\n\n          </Map>\n        </div> \n      </div>\n  );\n\n};\n\nexport default MapBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}